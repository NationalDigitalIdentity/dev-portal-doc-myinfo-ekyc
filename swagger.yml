openapi: 3.0.0
servers:
  - url: 'https://sandbox.api.myinfo.gov.sg'
    description: Sandbox
  - url: 'https://test.api.myinfo.gov.sg'
    description: Test
  - url: 'https://api.myinfo.gov.sg'
    description: Production
info:
  version: 3.2.0
  title: MyInfo API
  x-logo:
    url: 'https://public.cloud.myinfo.gov.sg/images/logo/myinfo-logo.png'
  description: >-
    MyInfo REST APIs for retrieving Person data.


    **Note - this specification is subject to changes based on evolution of the
    APIs.**


    # Release Notes

    * **3.2.0 (11 May 2021)**
      - **Data Items**
        - New:
          - partialuinfin
          - academicqualifications
          - cpfhousingwithdrawal
        - Deprecated:
          - mailadd
          - billadd
          - homeno
          - edulevel
          - gradyear
          - schoolname
          - householdincome
        - Updated:
          - Type enum for regadd (Unformatted to UNFORMATTED)
          - Description of SG Address Block to 'Block/House of Address'
          - Description for cpfcontributions to maximum of 15 months records
          - marriagecertno to maximum 50 characters
          - Local phone number default to '65'
          - Employment Sectors of workpass to upper case, remove enumeration and provide examples of possible values 
          - Value of dob updated to include potential formats 'YYYY' and 'YYYY-MM'
          - Removed code and desc fields from 'occupation' as these are SC/PR user provided fields. For FIN user's occupation, continue to use 'occupation.value'
      - **Security**
        - Certificate Authority list
          - Comodo to Comodo/Sectigo
          - New CA: Netrust
        - Network
          - Updated TLS version to only 1.2
          - Updated recommended cipher suites
      - **Features**
        - Added 'appLaunchURL' request parameter in 'Authorise' API for launching mobile application after successful authentication using SingPass mobile

    * **3.1.1 (4 December 2019)**
      - Updated path parameter 'uinfin' of person API to 'sub', indicating that the value of this parameter should come from the 'sub' attribute in access_token.
      - Updated sample code 'createPersonRequest' function under person API to use 'sub' instead of 'uinfin'.

    * **3.1.0 (16 September 2019)**
      - New data items available:
        - `cpfemployers`
        - `partialuinfin`
      - New 'subentity' parameter in person API that allows traceability to platform's client who will be receiving the person data.
      - Provide clarity on the handling of `housingtype` & `hdbtype`

    * **3.0.2 (10 May 2019)**
      - Upper case all desc values for:
        - Driving Licence : Comstatus, PDL and QDL Validity
        - Children Birth Records: Sex
        - Sponsored Children Records: Sex, Residential Status
        - Person: Sex, Residential Status


    * **3.0.1 (15 Apr 2019)**
      - Removed `serialno` from `pdl` and `qdl` under `drivinglicence` as it is not in use.
      - Updated description for [Understanding the Data Structure](/#section/Understanding-the-Data-Structure-(NEW-in-v3))


    * **3.0.0 (31 Mar 2019)**

      **IMPORTANT NOTE:** response format for `person` API has substantial changes from the previous version. Please refer to [Understanding the Data Structure](#section/Understanding-the-Data-Structure-(NEW-in-v3)) for details.

      - APIs updated to v3:
        - Test:
          - /com/v3/authorise
          - /com/v3/token
          - /com/v3/person/{uinfin}/
          - /com/v3/person-sample/{uinfin}/
        - Production:
          - /com/v3/authorise
          - /com/v3/token
          - /com/v3/person/{uinfin}/
      - Response changes from JWE to JWE wrapping JWS
      - Security header (changes in Authorization header parameters)
        - Streamline header parameters to app_id, nonce, signature_method (RS256), signature, timestamp
      - Standardisation of 'code', 'desc' and 'value' of all data items.
      - New data items available:
        - employmentsector
        - passtype
        - hdbownership
        - sponsoredchildrenrecords
        - vehicles
        - drivinglicence
      - Rename data items:
        - workpassstatus -> passstatus
        - workpassexpirydate -> passexpirydate
      - Changes to the following data item to include "type" discriminator to discriminate local and foreign address. Format is significantly different between the two.
        - regadd
        - billadd
        - mailadd
      - Deprecated vehno attribute
      - Updated scheduled downtimes: sandbox and test enviroments will no longer have any scheduled downtimes.


    * **2.2.1 (28 Dec 2018)**
      - QR only login:
        - changes to support QR only login. `login_type` parameter must be provided in the authorise API call.

    * **2.2.0 (05 Dec 2018)**
      - Base URL changes:
        - **Production Environment**: from `myinfosg.api.gov.sg` to `api.myinfo.gov.sg`
        - **Test Environment**: from `myinfosgstg.api.gov.sg/test` to `test.api.myinfo.gov.sg`
        - **Sandbox Environment**: from `myinfosgstg.api.gov.sg/dev` to `sandbox.api.myinfo.gov.sg`

      - Security header (`.e.` no longer needed in basestring)
        - Before v2.2.0, when crafting the basestring of the security header, an additional `.e.` is required in the domain name: e.g. `myinfosgstg.api.gov.sg` -> `myinfosgstg.e.api.gov.sg`.
          <br>**Note: This is no longer required**
        - In v2.2.0, when crafting the basestring of the security header, the url in the basestring is the same as the one you call; e.g. `api.myinfo.gov.sg`
        - For more details, please refer to Security > Request Signing section for updated instructions.

      - Data items deprecated:
        - assessyear
        - assessableincome

      - New data items available:
        - noa(basic)
        - noa
        - noahistory(basic)
        - noahistory

      - Added link to [MyInfo demo app](https://github.com/ndi-trusted-data/myinfo-demo-app) under Support section for easy reference.


    * **2.1.1 (21 September 2018)**
      - updated error codes and descriptions for `token` and `person` APIs for better clarity when troubleshooting.

    * **2.1.0 (01 July 2018)**
      - "relationship" data item is deprecated
      - New data items available:
        - childrenbirthrecords
        - marriagecertno
        - countryofmarriage
        - workpassstatus
        - workpassexpirydate

    * **2.0.0 (20 April 2018)**
      - Base URL changed from:
        - myinfo.api.gov.sg to myinfosg.api.gov.sg (Production) and myinfosgstg.api.gov.sg (Staging)
      - APIs updated to v2:
        - Staging:
          - /test/v2/authorise
          - /test/v2/token
          - /test/v2/person/{uinfin}/
        - Production:
          - /v2/authorise
          - /v2/token
          - /v2/person/{uinfin}/
      - Updated responses for v2 Person APIs:
        - Response format will be JSON Web Encryption (JWE) instead of JSON Web Signature (JWS).



    ## Releases and Compatibility

    The RESTful API adopts __Semantic Versioning 2.0.0__ for releases, and every
    new release of the API increments the version numbers in the following
    format:

    ```

    {MAJOR}.{MINOR}.{PATCH}

    ```


    1. `{MAJOR}` number introduces incompatible API changes with previous
    `{MAJOR}` number also resets `{MINOR}` to `0`,

    2. `{MINOR}` number introduces new functionalities or information that are
    backward compatible also resets `{PATCH}` to `0`, and

    3. `{PATCH}` number introduces bug fixes and remains backward compatible.


    Pre-release or draft versions, when provided, are denoted by appended hypen
    `-` with a series of separate identifiers `{LABEL}-{VERSION}` following the
    `{PATCH}` number. Such releases are unstable and may not provide the
    intended compatibility with the specification in draft status.


    Serving as notice, the RESTful API in version `2.X.X` are incompatible with
    version `1.X.X` releases.


    Despite backward compatibility in `{MINOR}` or `{PATCH}` releases, API
    consumers are best to evaluate and determine their implementation does not
    disrupt use-case requirements.


    # Overview

    The following diagram illustrates how the integration with MyInfo APIs work:

    ![Overview](https://public.cloud.myinfo.gov.sg/images/myinfo-rebrand-overview.png
    "MyInfo API Overview")


    As shown above, your application will be interfacing with our API Gateway to
    integrate successfully with MyInfo.


    # Environments


    The RESTful APIs are provided in both testing and live environments, and are
    accessible over the __Internet__ via HTTPS.


    Consumers are to ensure firewall clearance on their edge network nodes for
    connecting to the APIs.


    The convention used by API endpoints' URLs is in the following format:


    ```

    https://{ENV_DOMAIN_NAME}/{CONTEXT}/{VERSION}/{RESOURCE}

    ```


    * `{ENV_DOMAIN_NAME}` indicates MyInfo's API domain names - respectively:
      * `sandbox.api.myinfo.gov.sg`, or
      * `test.api.myinfo.gov.sg`, or
      * `api.myinfo.gov.sg`, following

    * `/{CONTEXT}`, indicates the context of the API call = `/com`

    * `/{VERSION}` indicates the endpoint's release `{MAJOR}` version number
    path - for this release = `/v3`

    * `/{RESOURCE}` indicates the API resource path name.

    Any additional query string parameters are appended as needed.


    ## Available Environments


    ### 1. Sandbox Environment

    The sandbox environment is used for your testing when developing your
    prototype. The Person-Sample and Person API will return test data described
    in https://api.singpass.gov.sg/library/myinfo/developers/resources-personas.

    #### Note:
      - Domain Name: `sandbox.api.myinfo.gov.sg`
      - PKI digital signature is **not required** for all APIs.
      - Authorization Bearer access token is **not required** in Person-Sample API.
      - Authorization Bearer access token **is required** in Person API.


    ### 2. Test Environment

    The test enviroment is used for testing your application with the full
    security measures required in production. The Person API will return test
    data described in
    https://api.singpass.gov.sg/library/myinfo/developers/resources-personas.

    #### Note:
      - Domain Name: `test.api.myinfo.gov.sg`
      - PKI digital signature **is required** for Token and Person APIs. <br>Refer to Security > Request Signing for the steps to sign your request.
      - Authorization Bearer access token **is required** in Person API.


    ### 3. Production Environment

    The production enviroment is the actual live environment with full security
    measures and live data.

    #### Note:
      - Domain Name: `api.myinfo.gov.sg`
      - PKI digital signature **is required** for Token and Person APIs. <br>Refer to Security > Request Signing for the steps to sign your request.
      - Authorization Bearer access token **is required** in Person API.



    ## Scheduled Downtimes

    The following are the scheduled downtimes for the various environments:


    ### Production Environment

    * **CPFB data** - Everyday 5:00am to 5:30am

    * **IRAS data** - Every Wed, 2:00am to 6:00am, Every Sun, 2:00am to 8:30am

    * **Once a month**, Sunday 12:00 am to 8:00 am (date to be advised)


    ### Test Environment

    * none


    ### Sandbox Environment

    * none



    # Security

    ## HTTPS Interface


    MyInfo's API gateway supports accessing of APIs via the following
    interfaces:


    * HTTP version 1.1 connection over __TLS__ (Transport Layer Security)
    version __1.2__ standards, and cipher suites:
      * using __AES__ (Advanced Encryption Standard) and __SHA__ (Secure Hash Algorithm),
      * on either __GCM__ (Galois/Counter Mode) or __CBC__ (Cipher Block Chaining) mode.
    * Below is the list of recommended cipher suites that you may use:

      * TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
      * TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
      * TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
      * TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384

    > **IMPORTANT:** ensure your server supports **TLS 1.2** and supports a
    cipher suite in the list above.


    Accessing the RESTful APIs using prior versions of TLS and/or unsupported
    ciphersuites will result in connectivity errors. MyInfo's API gateway does
    not support 2-way TLS client nor mutual authentication.


    API HTTP interface features:


    1. __JSON__ (JavaScript Object Notation) is the supported data media format
    and indicated in `Content-Type` header `application/json`, also

    2. `Content-Length` header is omitted by having `Transfer-Encoding` header
    `chunked` emitted for streaming data, and

    3. __GZip__ (GNU Zip) response compression is supported by opt-in
    `Accept-Encoding: gzip` and indicated in `Content-Encoding` header `gzip`.


    ## OAuth2.0

    MyInfo APIs use OAuth2.0 authorisation code flow to perform authentication &
    authorisation.


    The sequence diagram below illustrates the steps involved in integrating
    your application with our APIs:


    ![OAuth](https://public.cloud.myinfo.gov.sg/images/sa-sequence-diagram.jpeg)


    The flow consists of 3 APIs:

    1. **Authorise**
        * This will trigger the SingPass login and consent page. Once successful, your application will receive the **authorisation code** via your callback url.

    2. **Token**
        * Call this server-to-server API with a valid **authorisation code** to get the **access token**.

    3. **Protected Resource (Person)**
        * Call this server-to-server API with a valid  **access token** to get the person data.

    If you have previously obtained the user's SingPass ID Token through
    integrating with Login, you can improve user experience by initiatiating a
    backchannel authentication using the ID Token and user will not need to
    re-login with SingPass again.

    ![OAuth-BC](https://public.cloud.myinfo.gov.sg/images/sa-bc-sequence-diagram.png)

    Similar to the previous, this flow includes a prior API call to authenticate
    the user:

    1. **Backchannel Authentication**
        * Call this server-to-server API with a valid **SingPass ID Token** to obtain a **bc_session** code.

    2. **Authorise**
        * Use the "bc_session" code received in previous step in this call and user will be routed to the consent page. Once successful, your application will receive the **authorisation code** via your callback url.

    3. **Token**
        * Call this server-to-server API with a valid **authorisation code** to get the **access token**.

    4. **Protected Resource (Person)**
        * Call this server-to-server API with a valid  **access token** to get the person data.

    ## Application Authentication


    Access to all server-to-server APIs will be authenticated by MyInfo's API
    gateway.

    Prior to calling the APIs, respective consumers are required to have:


    * approval of access, onboarding process for the required API resources will
    be provisioned, and

    * authentication credentials are then supplied and exchanged.


    Authentication methods provided by MyInfo's API gateway on internet:


    * OAuth 2.0 using `RS256` digital signature (see "**Request Signing**"
    section below)

    * Digital signature should be produced using a RSA private key with
    corresponding public certificate issued by one of the following compatible
    CAs:
      * Comodo/Sectigo
      * digiCert
      * Entrust
      * GeoTrust
      * GlobalSign
      * Netrust
      * Thawte
      * VeriSign



    ## Request Signing

    **NOTE: Test and Production Environments only**<br><br>

    All server-to-server API requests are to be digitally signed, by including
    the following parameters and values in the `Authorization` header:


    ```

    PKI_SIGN app_id="{app_id}",

    nonce="{random_nonce}",

    signature_method="RS256",

    signature="{base64_url_percent_encoded_signature}",

    timestamp="{unix_epoch_in_milliseconds}"

    ```


    *__Note__: Above sample is separated by lines for ease-of-reading, and
    new-line denotations are to be omitted in the actual request.*


    * `{app_id}` is the APP ID credential supplied upon onboarding,

    * `{random_nonce}` is an unique randomly generated text used for replay
    prevention,

    * `{signature_method}` is the signature algorithm of the authenticating
    gateway.

      * Value of __signature_method__ = `RS256`

    * `{base64_url_percent_encoded_signature}` is the binary of the generated
    signature encoded in __Base64__ URL-safe format,

    * `{unix_epoch_in_milliseconds}` is the UNIX epoch time in milliseconds



    ### Sample header with authorization parameters

    Below is an example of an Authorization header for the sample application.
    Make sure you list the parameters in the sequence shown below.

    ```
      Authorization: PKI_SIGN
      app_id="STG2-MYINFO-SELF-TEST",
      nonce="150590021034800",
      signature_method="RS256",
      signature="EEm+HEcNQajb5FkVd82zjojk+daYZXxSGPCOR2GHZeoyjZY1PK+aFMzHfWu7eJZYMa5WaEwWxdOdq5hjNbl8kHD7bMaOks7FgEPdjE++TNomfv7SMktDnIvZmPYAxhjb/C9POU2KT6tSlZT/Si/qMgD1cryaPwSeMoM59UZa1GzYmqlkveba7rma58uGwb3wZFH0n57UnouR6LYXDOOLkqi8uMZBuvRUvSJRXETAj2N0hT+4QJiN96Ct6IEQh/woZh0o74K5Ol9PpDSM08qC7Lj6N/k694J+hbBQVVviGn7/6mDkfbwdMDuoKs4t7NpqmAnwT+xaQSIZcexfrAVQYA==",
      timestamp="1505900210349"

    ```



    ### Sample Code in `NodeJS`

    ```
      // generates the security headers for calling API gateway
      function generateAuthorizationHeader(url, params, method, strContentType, authType, appId, keyCertContent, passphrase) {

        if (authType == "L2") {
          return generateRS256Header(url, params, method, strContentType, appId, keyCertContent, passphrase);
        } else {
          return "";
        }
      };

      // Signing Your Requests
      function generateRS256Header(url, params, method, strContentType, appId, keyCertContent, keyCertPassphrase) {
        var nonceValue = nonce();
        var timestamp = (new Date).getTime();

        // A) Construct the Authorisation Token Parameters
        var defaultAuthHeaders = {
          "app_id": appId, // App ID assigned to your application
          "nonce": nonceValue, // secure random number
          "signature_method": "RS256",
          "timestamp": timestamp // Unix epoch time
        };

        // B) Forming the Base String
        // Base String is a representation of the entire request (ensures message integrity)

        // i) Normalize request parameters
        var baseParams = sortJSON(_.merge(defaultAuthHeaders, params));

        var baseParamsStr = qs.stringify(baseParams);
        baseParamsStr = qs.unescape(baseParamsStr); // url safe

        // ii) concatenate request elements (HTTP method + url + base string parameters)
        var baseString = method.toUpperCase() + "&" + url + "&" + baseParamsStr;

        // C) Signing Base String to get Digital Signature
        var signWith = {
          key: fs.readFileSync(keyCertContent, 'utf8')
        }; // Provides private key

        // Load pem file containing the x509 cert & private key & sign the base string with it to produce the Digital Signature
        var signature = crypto.createSign('RSA-SHA256')
          .update(baseString)
          .sign(signWith, 'base64');

        // D) Assembling the Authorization Header
        var strAuthHeader = "PKI_SIGN app_id=\"" + appId + // Defaults to 1st part of incoming request hostname
          "\",timestamp=\"" + timestamp +
          "\",nonce=\"" + nonceValue +
          "\",signature_method=\"RS256\"" +
          ",signature=\"" + signature +
          "\"";

        return strAuthHeader;
      };


    ```


    ## Token Validation

    **NOTE: Person APIs only**<br><br>

    Access Tokens are in JWT format. This JWT complies to the standard 'JSON Web
    Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization
    Grants' (https://tools.ietf.org/html/rfc7523). You will need to verify the
    token with our public cert (provided during application onboarding).

    ### Sample Code in `NodeJS`

    ```
      // Sample Code for Verifying & Decoding JWS or JWT
      function verifyJWS(jws, publicCert) {
        // verify token
        // ignore notbefore check because it gives errors sometimes if the call is too fast.
        try {
          var jwspayload = jwt.verify(jws, fs.readFileSync(publicCert, 'utf8'), {
            algorithms: ['RS256'],
            ignoreNotBefore: true
          });
          return jwspayload;
        }
        catch(error) {
          throw("Error with verifying and decoding JWS");
        }
      }

    ```


    ## Payload Signing and Encryption (Person)

    **NOTE: Person APIs in Test and Production environments only**<br><br>

    The response payload for the **Person** API (for test and production
    environments) is first signed, then encrypted:
      - Signing is done using [**JWS (JSON Web Signature)**](https://tools.ietf.org/html/rfc7515) format
      - Encryption is done using [**JWE (JSON Web Encryption) Compact Serialization**](https://tools.ietf.org/html/rfc7516) format

    Encryption protects the data at rest while a signed payload means, if
    necessary, you will be able to pass this signed payload to a 3rd party where
    they can verify the payload's integrity with our public certificate.


    In order to read the payload, you have to perform the following steps in
    order:
      1. Decrypt the payload with your application's private key.
      2. Validate the decrypted payload signature with our public key.


    After doing the above steps, your application will be able to extract the
    payload in JSON format.

    ### STEP 1: Decryption

    * Encryption is done using your application's public key that you provided
    during onboarding. Decryption of the payload should be using the private key
    of that key-pair.

    * Current encryption algorithms used:
      * **RSA-OAEP** (for content key wrapping)
      * **AES256GCM** (for content encrytion)


    ### Sample Code in `NodeJS`

    ```
      // Sample Code for decrypting JWE
      // Decrypt JWE using private key
      function decryptJWE(header, encryptedKey, iv, cipherText, tag, privateKey) {

        return new Promise((resolve, reject) => {

          var keystore = jose.JWK.createKeyStore();

          var data = {
            "type": "compact",
            "ciphertext": cipherText,
            "protected": header,
            "encrypted_key": encryptedKey,
            "tag": tag,
            "iv": iv,
            "header": JSON.parse(jose.util.base64url.decode(header).toString())
          };
          keystore.add(fs.readFileSync(privateKey, 'utf8'), "pem")
            .then(function(jweKey) {
              // {result} is a jose.JWK.Key
              jose.JWE.createDecrypt(jweKey)
                .decrypt(data)
                .then(function(result) {
                  resolve(JSON.parse(result.payload.toString()));
                })
                .catch(function(error) {
                  reject(error);
                });
            });

        })
        .catch (error => {
          throw "Error with decrypting JWE";
        })
      }

    ```


    ### STEP 2: Verification of Signature

    The decrypted payload is signed according to [**JWS (JSON Web
    Signature)**](https://tools.ietf.org/html/rfc7515) format, similar to the
    access token.
      - signature algorithm used is `RS256`.

    #### Sample Code in `NodeJS`

    ```
      // Sample Code for Verifying & Decoding JWS or JWT
      function verifyJWS(jws, publicCert) {
        // verify payload
        // ignore notbefore check because it gives errors sometimes if the call is too fast.
        try {
          var jwspayload = jwt.verify(jws, fs.readFileSync(publicCert, 'utf8'), {
            algorithms: ['RS256'],
            ignoreNotBefore: true
          });
          return jwspayload;
        }
        catch(error) {
          throw("Error with verifying and decoding JWS");
        }
      }

    ```


    # Understanding the Data Structure (NEW in v3)

    MyInfo Person data follows a specific structure that you need to understand
    to traverse the data effectively. This section will explain the structure in
    detail.


    The diagram below illustrates how the data is represented logically:<br>

    ![MyInfo Person Data
    Structure](https://public.cloud.myinfo.gov.sg/images/myinfo-person-data-structure.png
    "MyInfo Person Data Structure")


    ## Data Items (Top-Level)

    Each top-level data item can either be a **data item object** or an array of
    **data item objects**.

    Each **data item object** will consist of the following properties:
      - `classification` (Data classification of data field. Default 'C' - Confidential)
      - `source` (see below)
      - `lastupdated` (Last updated date of data field. See "full-date" [here](http://xml2rfc.ietf.org/public/rfc/html/rfc3339.html#anchor14))
      - `unavailable` (in certain situations - see below)
      - additional data properties containing data values or arrays


    ### Data Source

      The `source` property indicates the source of data. Possible values are:
      * '1' - Government-Originated
      * '2' - User provided
      * '3' - Field is Not Applicable to Person
      * '4' - Verified by SingPass


      **Note:** All Government-Originated fields must be non-editable on your digital service form (some exceptions apply - see individual field descriptions).


    ## Data Properties

    In each data item, there can be multiple data properties or arrays of data
    properties.


    Each data property will contain either:
      - a `value` property, or
      - a pair of `code` and `desc` properties, or
      - an array of data properties, or
      - other data properties


    **Note:**
      - `value` property can be strings, numbers, or dates.
      - `code` and `desc` pairs will contain the code and its matching description.
      - `value` is mutually exclusive from (`code` + `desc`); i.e. if there is a `value`, there will not be any `code` or `desc`.
      - Where there is `code`, there will always be a `desc` - no `value` will be present.


    **Exceptions:** For these cases, the values will be directly in the property
    and not in a `value`, `code` or `desc` subproperty:
      - for data item metadata properties; e.g. `classification`, `source`, `lastupdated`, and `unavailable`
      - for discriminator properties; e.g. `type` in address formats




    ## Data Not Applicable

    Sometimes, a requested data item is not applicable to the person. Examples
    include:
      - a foreigner will never have a `regadd` data item.
      - a singapore citizen or permanent resident will never have `passtype` data item.

    For a full list, refer to the "Data Catalog" section of [MyInfo API
    Data](https://api.singpass.gov.sg/library/myinfo/business/implementation-myinfo-data)
    in our portal.


    **Note:** When a requested data item is **not applicable** to the person,
    the `source` property will be **3**. In such cases, please ignore the data
    item completely.


    ### Data Item Not Applicable

    When a requested data item is **not applicable** to the entity:
      - for data item objects, the `source` property will be **3**
      - for data item arrays, an empty array will be returned

    In such cases, please ignore the data item completely.


    ### Data Property Not Applicable

      - When a data property is **not applicable** to the person, it will not appear in the schema of that particular entity type.
      - Please check the Person schema to identify which data properties are not applicable to the person type.



    ## Data Unavailable

    In other situations, a requested data item might not have any data for that
    data item from the data source; i.e. data is **unavailable**. Examples
    include:
      - when a person does not have any CPF contributions in the last 15 months
      - when a person does not have any IRAS Notice of Assessments in the last 3 years
      - when a person does not have any vehicles registered under them


    **Note**: When a requested data item is **unavailable**:
      - for data item objects, the data item will have the property `unavailable` with value **true**.<br>
        In such cases, no additional properties (other than `classification`, `source`, and `lastupdated`) will be provided for the data item.
      - for arrays of data items, an empty array will be returned.

    Please display as "Not Available" in your form.


    ### Data Item Unavailable
      - for data item objects, the data item will have the property `unavailable` with value **true**.<br>
        In such cases, no additional properties (other than `classification`, `source`, `lastupdated`) will be provided for the data item.
      - for data item arrays, an empty array will be returned.

    Please display as "Not Available" in your form.


    ### Data Property Unavailable
      - for data property objects, the `value` or `code`/`desc` will be empty value ("") or NaN.
      - for arrays of data properties, an empty array will be returned.





    # Error Handling


    The RESTful APIs used HTTP specification standard status codes to indicate
    the success or failure of each request. Except gateway errors, the response
    content will be in the following JSON format:


    ```

    {
        "code": "integer (int32)",
        "message": "string"
    }

    ```

    > **Refer to the individual API definitions for the error codes you might
    encounter for each API.**



    # Support

    Please refer to the [NDI {api} Portal](https://api.singpass.gov.sg/) for the
    following supporting materials where relevant:

    - [MyInfo demo app](https://github.com/ndi-trusted-data/myinfo-demo-app)

    - [Code reference
    tables](https://api.singpass.gov.sg/assets/api-lib/myinfo/downloads/myinfo-api-code-tables.xlsx)

    - [Test accounts for test
    environments](https://api.singpass.gov.sg/library/myinfo/developers/resources-personas)

    - [Reference user journey
    templates](https://api.singpass.gov.sg/library/myinfo/business/implementation-reference-journey)


    For technical queries, contact
    [support@myinfo.gov.sg](mailto:support@myinfo.gov.sg).

    For business queries, contact
    [partner@myinfo.gov.sg](mailto:partner@myinfo.gov.sg).  
tags:
  - name: MyInfo
    description: RESTful API Definitions
x-tagGroups:
  - name: API Definitions
    tags:
      - MyInfo
paths:
  '/com/v3/person-sample/{uinfin}/':
    get:
      tags:
        - MyInfo
      summary: Person-Sample
      description: >-
        Retrieves a sample Person data from MyInfo based on UIN/FIN.


        This API does not use OAuth2.0 to perform authentication or
        authorisation, and does not require authorisation token and digital
        signature.


        **Note:** Null value indicates that an attribute is unavailable.
      servers:
        - url: 'https://sandbox.api.myinfo.gov.sg/'
          description: Sandbox
      operationId: getpersonsample
      parameters:
        - in: path
          name: uinfin
          required: true
          schema:
            type: string
            example: S9812381D
        - in: query
          name: attributes
          description: >-
            Comma separated list of attributes requested. Possible attributes
            are listed in the scopes of the OAuth2 Security Schema above.
          style: form
          schema:
            type: array
            items:
              type: string
              minimum: 1
            example: 'name,hanyupinyinname'
      x-code-samples:
        - lang: Shell
          source: >-
            curl
            https://sandbox.api.myinfo.gov.sg/com/v3/person-sample/S9812381D
      responses:
        '200':
          description: |-
            OK.

            **Note:**
            - Response will be a JSON object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
          example: null
  /com/v3/authorise:
    get:
      tags:
        - MyInfo
      summary: Authorise
      description: >-
        This API triggers SingPass login and obtain consent for the user to
        retrieve user's data from MyInfo.

        Once the user has authenticated and consented, an authorisation code
        (authcode) will be returned together with the state for verification via
        the callback URL defined.

        The authcode can then be used to retrieve an access token via the Token
        API.


        **Note:** This API is public and should be implemented as a link or
        button on your online webpage.

        **Note:** For partners integrating via android mobile application,
        please ensure that the "setDomStorageEnable" attribute is enabled.
      operationId: getauthorise
      parameters:
        - in: query
          name: authmode
          description: >-
            Mode of authentication used to obtain user consent. Default is
            "SINGPASS".
          required: false
          schema:
            type: string
            enum:
              - SINGPASS
              - MOBILEID
            default: SINGPASS
        - in: query
          name: purpose
          description: >-
            State the purpose for requesting the data. This will be shown to the
            user for his consent.
          allowEmptyValue: false
          required: true
          schema:
            type: string
        - in: query
          name: response_type
          description: Response type for authorisation code flow - must be "code".
          allowEmptyValue: false
          required: false
          schema:
            type: string
            default: code
        - in: query
          name: attributes
          description: >-
            Comma separated list of attributes requested. Possible attributes
            are listed in the scopes of the OAuth2 Security Schema above.
          required: true
          style: form
          schema:
            type: array
            items:
              type: string
              minimum: 1
            example: 'name,hanyupinyinname'
        - in: query
          name: state
          description: >-
            Identifier that represents the user's session/transaction with the
            client for reconciling query and response. The same value will be
            sent back via the callback URL. Use a unique system generated number
            for each user/transaction.
          allowEmptyValue: false
          required: true
          schema:
            type: string
        - in: query
          name: redirect_uri
          description: Your callback URL for MyInfo to return with the authorisation code.
          allowEmptyValue: false
          required: true
          schema:
            type: string
        - in: query
          name: client_id
          description: Unique ID for your application.
          allowEmptyValue: false
          required: true
          schema:
            type: string
            example: STG-180099999K-TEST01
        - in: query
          name: login_type
          description: >-
            Pilot for SingPass-QR-only-login using SingPass Mobile.
            SingPass-QR-only-login is enabled by specifying this parameter with
            value set to `QR`.


            Note that this only applies to digital service on-boarded to perform
            SingPass-QR-only-login.
          required: false
          schema:
            type: string
            enum:
              - SINGPASS
              - QR
            default: SINGPASS
        - in: query
          name: appLaunchURL
          description: >-
            Url scheme to launch back your mobile app after successful
            authentication using SingPass mobile.
          required: false
          schema:
            type: string
      responses:
        '302':
          description: >-
            Service will redirect all responses to 'redirect_uri' with
            additional parameters added as response results. Expected parameters
            include:

            - **code**: this is the authorisation code you will use when calling
            the token endpoint

            - **state**: this should be the same state passed in your initial
            URL.

            - **error**: if there are any errors encountered, the error code
            will be given in this parameter.
              - **'500'** - Unknown or other server side errors.
              - **'503'** - MyInfo under maintenance. Error description will also be given in error_description parameter.
              - **'access_denied'** - When user did not give consent, refer to error_description parameter for the reason.
            - **error_description**: if error is 'access_denied' i.e. user did
            not give consent, the description will be 'Resource Owner did not
            authorize the request'.



            **Note:** If user closes the browser window prematurely, there will
            be no callback to the 'redirect_uri'. Therefore it is important for
            you to check the 'state' to verify that the transaction is the same.
      x-code-samples:
        - lang: JavaScript
          source: |
            function callAuthoriseApi() {
              var authoriseUrl = authApiUrl + "?client_id=" + clientId +
                "&attributes=" + attributes +
                "&purpose=" + purpose +
                "&state=" + state +
                "&redirect_uri=" + redirectUrl;

              window.location = authoriseUrl;
            }
  /com/v3/token:
    post:
      tags:
        - MyInfo
      summary: Token
      description: >-
        This API generates an access token when presented with a valid authcode
        obtained from the Authorise API. This token can then be used to request
        for the user's data that were consented.
      operationId: gettoken
      parameters:
        - in: header
          name: Authorization
          description: >-
            Add authorization token constructed containing the RSA digital
            signature of the base string. Refer to
            https://api.singpass.gov.sg/library/myinfo/developers/tutorial3 on
            how this token should be generated.


            **Note:** This header is not required when calling Sandbox API.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: >-
            OK.


            Returning a JSON object which contains the authorization access
            token (JWT) that will be used to retrieve the data from MyInfo.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokenResponse'
        '400':
          description: |-
            Possible scenarios:
              - Same authcode in the body is being re-used.
                We do not allow same authcode being used in multiple calls. Ensure that authcode is not repeated.
              - AuthCode error - missing, invalid, expired, revoked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: |-
            Unauthorized.

            Possible scenarios:
              - No security header given (HTTP 'Authorization' header)
              - Invalid App ID used. Digital service is not registered with MyInfo
              - The timestamp of server is not synchronised. Check timestamp of server.
              - The value of the nonce in the authorisation header was deemed to be repeated. Check that the nonce is not re-used
              - Ensure HTTP 'Authorization' header to be 'PKI_SIGN'
              - Signature incorrect - Verify your signature by using our signature verifier tool and ensure correct key is used to sign the base string.
                - Ensure that base string contains all parameters required
                - Ensure attributes in base string are separate by comma(,), and not %2C
                - Ensure that correct key is used to sign the base string
                - Ensure that HTTP call is made with the same query/body parameters used to formulate the base string.
                - Ensure the base string contains the following:
                    1. HTTP GET method(in uppercase)
                    2. API (e.g. https://..)
                    3. These parameters:
                      * app_id
                      * nonce
                      * signature
                      * signature_method
                      * timestamp
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: |-
            Forbidden

            Possible scenarios:
              - Incorrect API URL used. Refer to tutorial for the correct API URL(test/production)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Unexpected error. Check response body for actual error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        $ref: '#/components/requestBodies/gettoken'
      x-code-samples:
        - lang: NodeJS
          source: |
            // function to prepare request for TOKEN API
            function createTokenRequest(code) {
              var cacheCtl = "no-cache";
              var contentType = "application/x-www-form-urlencoded";
              var method = "POST";
              var request = null;

              // preparing the request with header and parameters
              // assemble params for Token API
              var strParams = "grant_type=authorization_code" +
                "&code=" + code +
                "&redirect_uri=" + _redirectUrl +
                "&client_id=" + _clientId +
                "&client_secret=" + _clientSecret;
              var params = querystring.parse(strParams);


              // assemble headers for Token API
              var strHeaders = "Content-Type=" + contentType + "&Cache-Control=" + cacheCtl;
              var headers = querystring.parse(strHeaders);

              // Sign request and add Authorization Headers
              var authHeaders = generateAuthorizationHeader(
                _tokenApiUrl,
                params,
                method,
                contentType,
                _authLevel,
                _clientId,
                _privateKeyContent,
                _clientSecret
              );

              if (!_.isEmpty(authHeaders)) {
                _.set(headers, "Authorization", authHeaders);
              }

              var request = restClient.post(_tokenApiUrl);

              // Set headers
              if (!_.isUndefined(headers) && !_.isEmpty(headers))
                request.set(headers);

              // Set Params
              if (!_.isUndefined(params) && !_.isEmpty(params))
                request.send(params);

              return request;
            }
      security:
        - PKISign: []
  '/com/v3/person/{sub}/':
    get:
      tags:
        - MyInfo
      summary: Person
      description: >-
        This API returns user's data from MyInfo when presented with a valid
        access token obtained from the Token API.


        **Note:** Null value indicates that an attribute is unavailable.
      operationId: getperson
      parameters:
        - in: header
          name: Authorization
          description: >-
            Add authorization token constructed containing the RSA digital
            signature of the base string. Refer to
            https://api.singpass.gov.sg/library/myinfo/developers/tutorial3 on
            how this token should be generated. Also include the access token
            (JWT) from /token API in your header prefixed with 'Bearer'.


            **Note:** Only the Bearer token is required when calling Sandbox
            API.
          required: true
          schema: string
        - in: path
          name: sub
          description: >-
            Identifier of user obtained from 'sub' attribute in access token.
            May be UINFIN or UUID.
          required: true
          schema:
            type: string
            example: 9E9B2260-47B8-455B-89B5-C48F4DB98322
        - in: query
          name: txnNo
          description: >-
            Transaction ID from requesting digital services for cross
            referencing.
          required: false
          schema:
            type: string
        - in: query
          name: attributes
          required: true
          description: >
            Comma separated list of attributes requested. Possible attributes
            are listed in the scopes of the OAuth2 Security Schema above.
          style: form
          schema:
            type: array
            items:
              type: string
              minimum: 1
            example: 'name,hanyupinyinname'
        - in: query
          name: client_id
          description: Unique ID for your application.
          allowEmptyValue: false
          required: true
          schema:
            type: string
            example: STG-180099999K-TEST01
        - in: query
          name: subentity
          description: UEN of SaaS partner's client that will be receiving the person data.
          allowEmptyValue: true
          required: false
          schema:
            type: string
            example: 180099736H
      responses:
        '200':
          description: >-
            OK.


            **Note:**

            - Response Content-Type will be 'application/jose', which is a JSON
            object conforming to the JWE standard
            (https://tools.ietf.org/html/rfc7516).

            - Response contents are first signed, then encrypted. In order to
            access the data, your application should do the following steps in
            order:
                1. Decrypt the payload with your application's private key.
                2. Validate the decrypted payload signature with our public key.
            - After doing the above steps, your application will be able to
            extract the payload in JSON format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        '401':
          description: >-
            Unauthorized.


            Possible scenarios:

            - No security header given (HTTP 'Authorization' header)

            - Invalid App ID used. Digital service is not registered with MyInfo

            - The timestamp of server is not synchronised. Check timestamp of
            server.

            - The value of the nonce in the authorisation header was deemed to
            be repeated. Check that the nonce is not re-used

            - Ensure HTTP 'Authorization' header to be 'PKI_SIGN'

            - Signature incorrect - Verify your signature by using our signature
            verifier tool and ensure correct key is used to sign the base
            string.
              - Ensure that base string contains all parameters required
              - Ensure attributes in base string are separate by comma(,), and not %2C
              - Ensure that correct key is used to sign the base string
              - Ensure that HTTP call is made with the same query/body parameters used to formulate the base string.
              - Ensure the base string contains the following:
                  1. HTTP GET method(in uppercase)
                  2. API (e.g. https://..)
                  3. These parameters:
                    * app_id
                    * nonce
                    * signature
                    * signature_method
                    * timestamp
              - The requested UIN/FIN does not match the UIN/FIN of the person who logged in
              - Requested attributes do not match the attributes consented by person.
                This happens if the list of attributes in your request are different from the attributes specified when calling the token API.

            Details will be given in the error object returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: |-
            Forbidden

            Possible scenarios:
              - Incorrect API URL used. Refer to tutorial for the correct API URL(test/production)
              - Request contains attributes not allowable for the digital service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: |-
            Not Found.

            Possible scenarios.
              - Missing MyInfo profile due to UIN/FIN accessing his MyInfo account less than a day after SingPass account activation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Unexpected error. Check response body for actual error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-code-samples:
        - lang: NodeJS
          source: |
            // function to prepare request for PERSON API
            function createPersonRequest(sub, validToken) {
              var url = _personApiUrl + "/" + sub + "/";
              var cacheCtl = "no-cache";
              var method = "GET";
              var request = null;
              // assemble params for Person API
              var strParams = "client_id=" + _clientId +
                "&attributes=" + _attributes;
              var params = querystring.parse(strParams);

              // assemble headers for Person API
              var strHeaders = "Cache-Control=" + cacheCtl;
              var headers = querystring.parse(strHeaders);
              var authHeaders;

              // Sign request and add Authorization Headers
              authHeaders = generateAuthorizationHeader(
                url,
                params,
                method,
                "", // no content type needed for GET
                _authLevel,
                _clientId,
                _privateKeyContent,
                _clientSecret
              );

              if (!_.isEmpty(authHeaders)) {
                _.set(headers, "Authorization", authHeaders + ",Bearer " + validToken);
              }
              else {
                // NOTE: include access token in Authorization header as "Bearer " (with space behind)
                  _.set(headers, "Authorization", "Bearer " + validToken);
              }

              // invoke token API
              var request = restClient.get(url);

              // Set headers
              if (!_.isUndefined(headers) && !_.isEmpty(headers))
                request.set(headers);

              // Set Params
              if (!_.isUndefined(params) && !_.isEmpty(params))
                request.query(params);

              return request;
            }
      security:
        - OAuth2: []
          PKISign: []
components:
  requestBodies:
    gettoken:
      content:
        application/x-www-form-urlencoded:
          schema:
            type: object
            properties:
              code:
                description: The authcode given by the authorise API.
                type: string
              grant_type:
                description: Grant type for getting token (default "authorization_code")
                type: string
                default: authorization_code
              client_secret:
                description: Secret key given to your application during onboarding.
                type: string
              client_id:
                description: Unique ID for your application.
                type: string
              redirect_uri:
                description: Application's callback URL.
                type: string
              state:
                description: >-
                  Identifier that represents the user's session with the client,
                  provided earlier during the authorise API call.
                type: string
            required:
              - code
              - client_secret
              - client_id
              - redirect_uri
    bc-authenticate:
      content:
        application/x-www-form-urlencoded:
          schema:
            type: object
            properties:
              state:
                description: >-
                  Unique value (user's session/transaction ID) generated by
                  serverside that is used for reconciliation of requests and
                  responses across bc-authenticate, authorise and token calls.
                allowEmptyValue: false
                type: string
              client_secret:
                description: Secret key given to your application during onboarding.
                type: string
                required: true
                schema:
                  type: string
              client_id:
                description: Unique ID for your application.
                type: string
            required:
              - state
              - client_secret
              - client_id
  securitySchemes:
    PKISign:
      type: http
      description: >
        PKI digital signature for server to server calls. See [Request
        Signing](#section/Security/Request-Signing) for more details.
      scheme: Mutual authentication via PKI digital signature in Authorization header
    OAuth2:
      description: |
        The following are the available OAuth2 scopes for MyInfo APIs
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: /com/v3/authorise
          tokenUrl: /com/v3/token
          scopes:
            uinfin: NRIC/FIN
            partialuinfin: Partial NRIC/FIN
            name: Principal Name
            aliasname: Alias Name
            hanyupinyinname: Hanyu Pinyin Name
            hanyupinyinaliasname: Hanyu Pinyin Alias Name
            marriedname: Married Name
            sex: Sex
            race: Race
            secondaryrace: Secondary Race
            dialect: Dialect
            dob: Date of Birth
            residentialstatus: Residential Status
            nationality: Nationality
            birthcountry: Country of Birth
            passportnumber: Passport Number
            passportexpirydate: Passport Expiry Date
            passtype: Pass Type
            passstatus: Pass Status
            passexpirydate: Pass Expiry Date
            employmentsector: Employment Sector
            mobileno: Mobile Number
            homeno: Home Contact Number
            email: Email Address
            regadd: Registered Address
            hdbtype: Type of HDB
            housingtype: Type of Housing
            mailadd: Mailing Address
            billadd: Billing Address
            academicqualifications: Academic Qualifications
            cpfbalances: CPF Account Balance
            cpfcontributions: CPF Contribution History (up to 15 months)
            cpfemployers: Employers who paid CPF Contribution (up to 15 months)
            cpfhousingwithdrawal: CPF Housing Withdrawal
            noa-basic: 'Notice of Assessment (Basic, Latest Year)'
            noahistory-basic: 'Notice of Assessment (Basic, Last 2 Years)'
            noa: 'Notice of Assessment (Detailed, Latest Year)'
            noahistory: 'Notice of Assessment (Detailed, Last 2 Years)'
            ownerprivate: Ownership of Private Residential Property
            householdincome: Monthly Household Income
            employment: Name of Employer
            occupation: Occupation
            edulevel: Highest Education Level
            schoolname: Name of School Attended
            gradyear: Year of Graduation
            marital: Marital Status
            marriagedate: Marriage Date
            marriagecertno: Marriage Certificate Number
            countryofmarriage: Country of Marriage
            divorcedate: Divorce Date
            childrenbirthrecords.birthcertno: Children Birth Records - Birth Cert Number
            childrenbirthrecords.name: Children Birth Records - Name
            childrenbirthrecords.aliasname: Children Birth Records - Alias Name
            childrenbirthrecords.hanyupinyinname: Children Birth Records - Hanyu Pinyin Name
            childrenbirthrecords.hanyupinyinaliasname: Children Birth Records - Hanyu Pinyin Alias Name
            childrenbirthrecords.marriedname: Children Birth Records - Married Name
            childrenbirthrecords.sex: Children Birth Records - Sex
            childrenbirthrecords.race: Children Birth Records - Race
            childrenbirthrecords.secondaryrace: Children Birth Records - Secondary Race
            childrenbirthrecords.dob: Children Birth Records - Date of Birth
            childrenbirthrecords.tob: Children Birth Records - Time of Birth
            childrenbirthrecords.dialect: Children Birth Records - Dialect
            childrenbirthrecords.lifestatus: Children Birth Records - Life Status
            childrenbirthrecords.vaccinationrequirements: Children Birth Records - Vaccination Requirements
            sponsoredchildrenrecords.nric: Sponsored Children Records - NRIC
            sponsoredchildrenrecords.name: Sponsored Children Records - Name
            sponsoredchildrenrecords.aliasname: Sponsored Children Records - Alias Name
            sponsoredchildrenrecords.hanyupinyinname: Sponsored Children Records - Hanyu Pinyin Name
            sponsoredchildrenrecords.hanyupinyinaliasname: Sponsored Children Records - Hanyu Pinyin Alias Name
            sponsoredchildrenrecords.marriedname: Sponsored Children Records - Married Name
            sponsoredchildrenrecords.sex: Sponsored Children Records - Sex
            sponsoredchildrenrecords.race: Sponsored Children Records - Race
            sponsoredchildrenrecords.secondaryrace: Sponsored Children Records - Secondary Race
            sponsoredchildrenrecords.dialect: Sponsored Children Records - Dialect
            sponsoredchildrenrecords.dob: Sponsored Children Records - Date of Birth
            sponsoredchildrenrecords.birthcountry: Sponsored Children Records - Country of Birth
            sponsoredchildrenrecords.lifestatus: Sponsored Children Records - Life Status
            sponsoredchildrenrecords.residentialstatus: Sponsored Children Records - Residential Status
            sponsoredchildrenrecords.nationality: Sponsored Children Records - Nationality
            sponsoredchildrenrecords.scprgrantdate: Sponsored Children Records - SC PR Grant Date
            sponsoredchildrenrecords.vaccinationrequirements: Sponsored Children Records - Vaccination Requirements
            vehicles.vehicleno: Vehicles - Vehicle Number
            vehicles.type: Vehicles - Vehicle Type
            vehicles.iulabelno: Vehicles - IU Label Number
            vehicles.make: Vehicles - Vehicle Make
            vehicles.model: Vehicles - Vehicle Model
            vehicles.chassisno: Vehicles - Chassis Number
            vehicles.engineno: Vehicles - Engine Number
            vehicles.motorno: Vehicles - Motor Number
            vehicles.yearofmanufacture: Vehicles - Year of Manufacture
            vehicles.firstregistrationdate: Vehicles - First Registration Date
            vehicles.originalregistrationdate: Vehicles - Original Registration Date
            vehicles.coecategory: Vehicles - COE Category
            vehicles.coeexpirydate: Vehicles - COE Expiry Date
            vehicles.roadtaxexpirydate: Vehicles - Road Tax Expiry Date
            vehicles.quotapremium: Vehicles - Quota Premium
            vehicles.openmarketvalue: Vehicles - Open Market Value
            vehicles.co2emission: Vehicles - CO2 Emission Rate
            vehicles.status: Vehicles - Vehicle Status
            vehicles.primarycolour: Vehicles - Primary Colour
            vehicles.secondarycolour: Vehicles - Secondary Colour
            vehicles.attachment1: Vehicles - Attachment 1
            vehicles.attachment2: Vehicles - Attachment 2
            vehicles.attachment3: Vehicles - Attachment 3
            vehicles.scheme: Vehicles - Vehicle Scheme
            vehicles.thcemission: Vehicles - THC Emission Rate
            vehicles.coemission: Vehicles - CO Emission Rate
            vehicles.noxemission: Vehicles - NOx Emission Rate
            vehicles.pmemission: Vehicles - PM Emission Rate
            vehicles.enginecapacity: Vehicles - Engine Capacity
            vehicles.powerrate: Vehicles - Power Rate
            vehicles.effectiveownership: Vehicles - Effective Date/Time of Ownership
            vehicles.propellant: Vehicles - Propellant
            vehicles.maximumunladenweight: Vehicles - Max Unladen Weight
            vehicles.maximumladenweight: Vehicles - Max Laden Weight
            vehicles.minimumparfbenefit: Vehicles - Minimum PARF Benefit
            vehicles.nooftransfers: Vehicles - No. of Transfers
            vehicles.vpc: Vehicles - Vehicle Parking Certificate
            drivinglicence.comstatus: Driving Licence - Certificate of Merit Status
            drivinglicence.totaldemeritpoints: Driving Licence - Total Demerit Points
            drivinglicence.suspension.startdate: Driving Licence - Suspension Start Date
            drivinglicence.suspension.enddate: Driving Licence - Suspension End Date
            drivinglicence.disqualification.startdate: Driving Licence - Disqualification Start Date
            drivinglicence.disqualification.enddate: Driving Licence - Disqualification End Date
            drivinglicence.revocation.startdate: Driving Licence - Revocation Start Date
            drivinglicence.revocation.enddate: Driving Licence - Revocation End Date
            drivinglicence.pdl.validity: Driving Licence - Provisional Driving Licence Validity
            drivinglicence.pdl.expirydate: Driving Licence - Provisional Driving Licence Expiry Date
            drivinglicence.pdl.classes: Driving Licence - Provisional Driving Licence Class
            drivinglicence.qdl.validity: Driving Licence - Qualified Driving Licence Validity
            drivinglicence.qdl.expirydate: Driving Licence - Qualified Driving Licence Expiry Date
            drivinglicence.qdl.classes: Driving Licence - Qualified Driving Licence Class
            drivinglicence.photocardserialno: Driving Licence - Photo Card Serial Number
            hdbownership.noofowners: HDB Ownership - Number of Owners
            hdbownership.address: HDB Ownership - Address
            hdbownership.hdbtype: HDB Ownership - Type of HDB Dwelling
            hdbownership.leasecommencementdate: HDB Ownership - Lease Commencement Date
            hdbownership.termoflease: HDB Ownership - Term of Lease
            hdbownership.dateofpurchase: HDB Ownership - Date of Purchase
            hdbownership.dateofownershiptransfer: HDB Ownership - Date of Transfer of Ownership
            hdbownership.loangranted: HDB Ownership - Loan Granted
            hdbownership.originalloanrepayment: HDB Ownership - Original Loan Repayment Period
            hdbownership.balanceloanrepayment: HDB Ownership - Balance Loan Repayment Period
            hdbownership.outstandingloanbalance: HDB Ownership - Outstanding HDB Loan Balance
            hdbownership.monthlyloaninstalment: HDB Ownership - Monthly Loan Instalment
  schemas:
    backchannel-auth-response:
      description: Response from succsssful backchannel authentication
      type: object
      properties:
        bc_session:
          type: string
          description: >-
            Unique string generated after successful backchannel authentication.
            This short-lived value should be used in the authorise call, which
            verifies the authentication done and creates browser session.
        state:
          type: string
          description: >-
            Unique value (user's session/transaction ID) generated by serverside
            that is used for reconciliation of requests and responses across
            bc-authenticate, authorise and token calls.
    AuthTokenResponse:
      description: Authorisation Token Response JSON
      type: object
      properties:
        access_token: &ref_0
          title: JWTAccessToken
          description: >-
            Access token to be used in the subsequent resource endpoint call.
            This is in the form of  JWT (JSON web token). Include this in your
            header as 'Bearer' when invoking the resource API. This JWT complies
            to the standard 'JSON Web Token (JWT) Profile for OAuth 2.0 Client
            Authentication and Authorization Grants'
            (https://tools.ietf.org/html/rfc7523).


            **Note:** This token is returned in the form of a compact serialized
            string. Decode and verify the signature before use.
          type: object
          properties:
            tokenName:
              type: string
              description: Name of Token. This will be 'access_token'.
              default: access_token
            sub:
              type: string
              description: (subject) This is the identifier of the user who logged in.
            scope:
              type: array
              description: Scopes allowed. This is the list scopes user has consented to.
              items:
                type: string
            nbf:
              type: string
              description: >-
                (not before) - the time before which the token MUST NOT be
                accepted for processing
            iss:
              type: string
              description: (issuer) Issuer of the JWT.
            expires_in:
              type: string
              description: The remaining lifetime of the access token.
            iat:
              type: string
              description: (issued at) Time which JWT was issued at.
            exp:
              type: string
              description: (expiration time) time which JWT will expire
            realm:
              type: string
              description: Realm for OAuth process.
            aud:
              type: string
              description: Audience for JWT.
            jti:
              type: string
              description: (JWT ID) unique identifier for the JWT token.
            token_type:
              type: string
              description: 'type of token, which is "Bearer".'
              default: Bearer
            authGrantId:
              type: string
              description: Internal system id for auth grant. Not used.
            auditTrackingId:
              type: string
              description: Internal Id for audit tracking. not used.
        token_type:
          type: string
          description: Type of token (Bearer)
          default: Bearer
        expires_in:
          type: integer
          description: Expiry of access token (in seconds)
        refresh_token:
          type: string
          description: >-
            Refresh token that can be used to exchange for another access token.
            Only available if client is configured to receive refresh token.
        scope:
          type: string
          description: 'Scopes requested, separated by space'
      required:
        - access_token
        - token_type
    JWTAccessToken: *ref_0
    Person:
      type: object
      description: Person instance's details
      allOf:
        - $ref: '#/components/schemas/PersonCommon'
        - $ref: '#/components/schemas/PersonFinancial'
    PersonFinancial:
      type: object
      description: Person instance's details
      properties:
        noa-basic:
          description: Summary of latest Notice of Assessment within the past three years.
          allOf:
            - $ref: '#/components/schemas/NOABasic'
            - $ref: '#/components/schemas/DataFieldProperties'
        noa:
          description: >-
            Detailed breakdown of latest Notice of Assessment within the past
            three years.
          allOf:
            - $ref: '#/components/schemas/NOA'
            - $ref: '#/components/schemas/DataFieldProperties'
        noahistory-basic:
          allOf:
            - $ref: '#/components/schemas/noahistory-basic'
            - $ref: '#/components/schemas/DataFieldProperties'
        noahistory:
          allOf:
            - $ref: '#/components/schemas/noahistory'
            - $ref: '#/components/schemas/DataFieldProperties'
        cpfcontributions:
          allOf:
            - $ref: '#/components/schemas/cpfcontributions'
            - $ref: '#/components/schemas/DataFieldProperties'
        cpfemployers:
          allOf:
            - $ref: '#/components/schemas/cpfemployers'
            - $ref: '#/components/schemas/DataFieldProperties'
        cpfbalances:
          allOf:
            - $ref: '#/components/schemas/cpfbalances'
            - $ref: '#/components/schemas/DataFieldProperties'
        cpfhousingwithdrawal:
          allOf:
            - $ref: '#/components/schemas/cpfhousingwithdrawal'
            - $ref: '#/components/schemas/DataFieldProperties'
    PersonCommon:
      type: object
      description: Person instance's details
      properties:
        partialuinfin:
          allOf:
            - $ref: '#/components/schemas/partialuinfin'
            - $ref: '#/components/schemas/DataFieldProperties'
        uinfin:
          allOf:
            - $ref: '#/components/schemas/uinfin'
            - $ref: '#/components/schemas/DataFieldProperties'
        name:
          allOf:
            - $ref: '#/components/schemas/name'
            - $ref: '#/components/schemas/DataFieldProperties'
        hanyupinyinname:
          allOf:
            - $ref: '#/components/schemas/hanyupinyinname'
            - $ref: '#/components/schemas/DataFieldProperties'
        aliasname:
          allOf:
            - $ref: '#/components/schemas/aliasname'
            - $ref: '#/components/schemas/DataFieldProperties'
        hanyupinyinaliasname:
          allOf:
            - $ref: '#/components/schemas/hanyupinyinaliasname'
            - $ref: '#/components/schemas/DataFieldProperties'
        marriedname:
          allOf:
            - $ref: '#/components/schemas/marriedname'
            - $ref: '#/components/schemas/DataFieldProperties'
        sex:
          allOf:
            - $ref: '#/components/schemas/sex'
            - $ref: '#/components/schemas/DataFieldProperties'
        race:
          allOf:
            - $ref: '#/components/schemas/race'
            - $ref: '#/components/schemas/DataFieldProperties'
        secondaryrace:
          allOf:
            - $ref: '#/components/schemas/secondaryrace'
            - $ref: '#/components/schemas/DataFieldProperties'
        dialect:
          allOf:
            - $ref: '#/components/schemas/dialect'
            - $ref: '#/components/schemas/DataFieldProperties'
        nationality:
          allOf:
            - $ref: '#/components/schemas/nationality'
            - $ref: '#/components/schemas/DataFieldProperties'
        dob:
          allOf:
            - $ref: '#/components/schemas/dob'
            - $ref: '#/components/schemas/DataFieldProperties'
        birthcountry:
          allOf:
            - $ref: '#/components/schemas/birthcountry'
            - $ref: '#/components/schemas/DataFieldProperties'
        residentialstatus:
          allOf:
            - $ref: '#/components/schemas/residentialstatus'
            - $ref: '#/components/schemas/DataFieldProperties'
        passportnumber:
          allOf:
            - $ref: '#/components/schemas/passportnumber'
            - $ref: '#/components/schemas/DataFieldProperties'
        passportexpirydate:
          allOf:
            - $ref: '#/components/schemas/passportexpirydate'
            - $ref: '#/components/schemas/DataFieldProperties'
        regadd:
          allOf:
            - $ref: '#/components/schemas/regadd'
        mailadd:
          allOf:
            - $ref: '#/components/schemas/mailadd'
          deprecated: true
        billadd:
          allOf:
            - $ref: '#/components/schemas/billadd'
          deprecated: true
        housingtype:
          allOf:
            - $ref: '#/components/schemas/housingtype'
            - $ref: '#/components/schemas/DataFieldProperties'
        hdbtype:
          allOf:
            - $ref: '#/components/schemas/hdbtype'
            - $ref: '#/components/schemas/DataFieldProperties'
        hdbownership:
          type: array
          title: HDBOwnership
          description: |
            HDB Ownership details
          items:
            allOf:
              - $ref: '#/components/schemas/hdbownership'
              - $ref: '#/components/schemas/DataFieldProperties'
        ownerprivate:
          allOf:
            - $ref: '#/components/schemas/ownerprivate'
            - $ref: '#/components/schemas/DataFieldProperties'
        email:
          allOf:
            - $ref: '#/components/schemas/email'
            - $ref: '#/components/schemas/DataFieldProperties'
        homeno:
          allOf:
            - $ref: '#/components/schemas/homeno'
            - $ref: '#/components/schemas/DataFieldProperties'
          deprecated: true
        mobileno:
          allOf:
            - $ref: '#/components/schemas/mobileno'
            - $ref: '#/components/schemas/DataFieldProperties'
        marital:
          allOf:
            - $ref: '#/components/schemas/marital'
            - $ref: '#/components/schemas/DataFieldProperties'
        marriagecertno:
          allOf:
            - $ref: '#/components/schemas/marriagecertno'
            - $ref: '#/components/schemas/DataFieldProperties'
        countryofmarriage:
          allOf:
            - $ref: '#/components/schemas/countryofmarriage'
            - $ref: '#/components/schemas/DataFieldProperties'
        marriagedate:
          allOf:
            - $ref: '#/components/schemas/marriagedate'
            - $ref: '#/components/schemas/DataFieldProperties'
        divorcedate:
          allOf:
            - $ref: '#/components/schemas/divorcedate'
            - $ref: '#/components/schemas/DataFieldProperties'
        childrenbirthrecords:
          type: array
          title: ChildrenBirthRecords
          description: >-
            This refers to only local registered birth records(based on ICA’s
            electronic Birth Certificate Records from 1985 onwards).


            This includes adoption of locally registered child.


            For child below 21, the child’s Birth Cert No, Name, Sex, Race,
            Dialect, Date of Birth and Time of Birth will be shown.


            For child above 21, only the child’s Birth Cert Number will be
            shown.
          items:
            allOf:
              - $ref: '#/components/schemas/childrenbirthrecords'
        sponsoredchildrenrecords:
          type: array
          title: SponsoredChildrenRecords
          description: >-
            Details of children sponsored to be SG/PR


            For child below 21, the child’s Birth Cert No, Name, Sex, Race,
            Dialect, Date of Birth and Time of Birth will be shown.


            For child above 21, only the child’s last known NRIC will be shown.
          items:
            allOf:
              - $ref: '#/components/schemas/sponsoredchildrenrecords'
        edulevel:
          allOf:
            - $ref: '#/components/schemas/edulevel'
            - $ref: '#/components/schemas/DataFieldProperties'
          deprecated: true
        gradyear:
          allOf:
            - $ref: '#/components/schemas/gradyear'
            - $ref: '#/components/schemas/DataFieldProperties'
          deprecated: true
        schoolname:
          allOf:
            - $ref: '#/components/schemas/schoolname'
            - $ref: '#/components/schemas/DataFieldProperties'
          deprecated: true
        occupation:
          allOf:
            - $ref: '#/components/schemas/occupation'
            - $ref: '#/components/schemas/DataFieldProperties'
        employment:
          allOf:
            - $ref: '#/components/schemas/employment'
            - $ref: '#/components/schemas/DataFieldProperties'
        passtype:
          allOf:
            - $ref: '#/components/schemas/passtype'
            - $ref: '#/components/schemas/DataFieldProperties'
        passstatus:
          allOf:
            - $ref: '#/components/schemas/passstatus'
            - $ref: '#/components/schemas/DataFieldProperties'
        passexpirydate:
          allOf:
            - $ref: '#/components/schemas/passexpirydate'
            - $ref: '#/components/schemas/DataFieldProperties'
        employmentsector:
          allOf:
            - $ref: '#/components/schemas/employmentsector'
            - $ref: '#/components/schemas/DataFieldProperties'
        householdincome:
          allOf:
            - $ref: '#/components/schemas/householdincome'
            - $ref: '#/components/schemas/DataFieldProperties'
          deprecated: true
        vehicles:
          allOf:
            - $ref: '#/components/schemas/vehicles'
        drivinglicence:
          allOf:
            - $ref: '#/components/schemas/drivinglicence'
            - $ref: '#/components/schemas/DataFieldProperties'
        academicqualifications:
          allOf:
            - $ref: '#/components/schemas/academicqualifications'
            - $ref: '#/components/schemas/DataFieldProperties'
    DataFieldProperties:
      type: object
      required:
        - classification
        - source
        - lastupdated
      properties:
        classification:
          type: string
          maxLength: 1
          enum:
            - C
          default: C
          description: Data classification of data field. Default 'C' - Confidential.
        source:
          type: string
          maxLength: 1
          enum:
            - '1'
            - '2'
            - '3'
            - '4'
          description: >-
            Source of data.


            * '1' - Government-verified

            * '2' - User provided

            * '3' - Field is Not Applicable to Person

            * '4' - Verified by SingPass


            **Note:** All Government-verified fields must be **non-editable** on
            your digital service form (some exceptions apply - see individual
            field descriptions).
        lastupdated:
          type: string
          format: date
          description: >-
            Last updated date of data field. See "full-date" in
            http://xml2rfc.ietf.org/public/rfc/html/rfc3339.html#anchor14
        unavailable:
          type: boolean
          required: false
          description: |
            Optional flag to indicate if data is unavailable from data source.

            **NOTE:**
              - This optional property will be only present with value `true` if there is no data available from the data source; i.e. record not found.
              - When this flag is `true`, no other data attributes will be present (other than `classification`, `source`, and `lastupdated`).
              - If data is available from the data source, this property will not be present.
      example:
        classification: C
        source: '1'
        lastupdated: '2019-03-26'
    AddressSG:
      type: object
      description: Address details (Singapore Format)
      properties:
        type:
          type: string
          description: Type of Address (SG or UNFORMATTED for non SG)
          default: SG
          enum:
            - SG
            - UNFORMATTED
        block:
          type: object
          description: Block/House of Address
          properties:
            value:
              type: string
              maxLength: 10
              example: '548'
        building:
          type: object
          description: Building of Address
          properties:
            value:
              type: string
              maxLength: 66
              example: ''
        floor:
          type: object
          description: Floor of Address
          properties:
            value:
              type: string
              maxLength: 3
              example: 09
        unit:
          type: object
          description: Unit of Address
          properties:
            value:
              type: string
              maxLength: 5
              example: '128'
        street:
          type: object
          description: Street of Address
          properties:
            value:
              type: string
              maxLength: 66
              example: BEDOK NORTH AVENUE 1
        postal:
          type: object
          description: Postal Code of Address
          properties:
            value:
              type: string
              minLength: 6
              maxLength: 6
              example: '460548'
        country:
          type: object
          description: Country of Address. For AddressSG this will always be "SG".
          properties:
            code:
              type: string
              minLength: 2
              maxLength: 2
              default: SG
            desc:
              type: string
              default: SINGAPORE
    dataitem-address-sg:
      type: object
      description: Address details (Singapore Format)
      allOf:
        - $ref: '#/components/schemas/AddressSG'
        - $ref: '#/components/schemas/DataFieldProperties'
    AddressUnformatted:
      type: object
      description: Address details (Non-Singapore Format)
      properties:
        type:
          type: string
          description: Type of Address (SG or UNFORMATTED for non SG)
          default: UNFORMATTED
          enum:
            - SG
            - UNFORMATTED
        line1:
          type: object
          description: Unregistered Foreign address line 1
          properties:
            value:
              type: string
              maxLength: 66
              example: 4578 SMITHFIELD AVENUE
        line2:
          type: object
          description: Unregistered Foreign address line 2
          properties:
            value:
              type: string
              maxLength: 66
              example: HARTFORD CT 06120
    dataitem-address-unformatted:
      type: object
      description: Address details (Non-Singapore Format)
      allOf:
        - $ref: '#/components/schemas/AddressUnformatted'
        - $ref: '#/components/schemas/DataFieldProperties'
    HDBOwnership:
      type: object
      title: HDBOwnership
      description: >
        HDB Ownership details


        **TODO: is this tied to the registered address or the person (UINFIN) or
        both?**
      properties:
        noofowners:
          type: object
          description: >-
            Number of Owners. Note that this does not include executors,
            administrators or trustees.
          properties:
            value:
              type: integer
              maximum: 9
              example: 2
        address:
          allOf:
            - $ref: '#/components/schemas/AddressSG'
        hdbtype:
          allOf:
            - $ref: '#/components/schemas/hdbtype'
        leasecommencementdate:
          type: object
          description: >-
            Date from which the lease period starts. See "full-date" in
            http://xml2rfc.ietf.org/public/rfc/html/rfc3339.html#anchor14
          properties:
            value:
              type: string
              format: date
              example: '2008-06-13'
        termoflease:
          type: object
          description: >-
            Term of lease (in years) for the property computed from the lease
            commencement date.
          properties:
            value:
              type: integer
              maximum: 99
              example: 99
        dateofpurchase:
          type: object
          description: >-
            Effective date of flat purchase. See "full-date" in
            http://xml2rfc.ietf.org/public/rfc/html/rfc3339.html#anchor14
          properties:
            value:
              type: string
              format: date
              example: '2008-06-13'
        dateofownershiptransfer:
          type: object
          description: >-
            Effective date of partial transfer without monetary consideration
            (e.g. addition, deletion or substitution of a co-owner) for an HDB
            sold flat.


            For partial transfer of flat where at least one of the current owner
            remains in the household, the Date of Purchase remains unchanged
            while the date of transfer of ownership will be updated.


            For outright transfer where there is a total change of all owner(s),
            only the Date of Purchase will be updated.


            See "full-date" in
            http://xml2rfc.ietf.org/public/rfc/html/rfc3339.html#anchor14'
          properties:
            value:
              type: string
              format: date
              example: '2018-06-13'
        loangranted:
          type: object
          description: The amount of housing loan granted to owner(s) by HDB in SGD.
          properties:
            value:
              type: number
              format: double
              example: 310000.01
        originalloanrepayment:
          type: object
          description: >-
            The number of years of loan repaymnet opted by owner(s) at the time
            the loan is first granted to him/her.
          properties:
            value:
              type: integer
              maximum: 99
              example: 25
        balanceloanrepayment:
          type: object
          description: >-
            The remaining term of repayment for the loan in the format `years` +
            `months`.
          properties:
            years:
              type: object
              properties:
                value:
                  type: integer
                  maximum: 99
                  example: 2
            months:
              type: object
              properties:
                value:
                  type: integer
                  maximum: 99
                  example: 6
        outstandingloanbalance:
          type: object
          description: The amount of outstanding HDB loan owed by owner(s) in SGD.
          properties:
            value:
              type: number
              format: double
              example: 50000.01
        monthlyloaninstalment:
          type: object
          description: >-
            The amount of monthly instalment the owner(s) have to pay for
            his/her loan in SGD.
          properties:
            value:
              type: number
              format: double
              example: 1000.01
    NOA:
      type: object
      properties:
        amount:
          type: object
          description: Assessable Income
          properties:
            value:
              type: number
              format: double
              example: 100000.01
        yearofassessment:
          type: object
          description: value of data field
          properties:
            value:
              type: string
              pattern: '[0-9]{4}'
              maxLength: 4
              example: '2018'
        employment:
          type: object
          description: Assessable Income from employment
          properties:
            value:
              type: number
              format: double
              example: 100000.01
        trade:
          type: object
          description: Assessable Income from trade
          properties:
            value:
              type: number
              format: double
              example: 0
        rent:
          type: object
          description: Assessable Income from rent
          properties:
            value:
              type: number
              format: double
              example: 0
        interest:
          type: object
          description: Assessable Income from interest
          properties:
            value:
              type: number
              format: double
              example: 0
        taxclearance:
          type: object
          description: >-
            Tax Clearance indicator. This means that tax clearance has been
            sought by the employer for this NOA assessment. For more
            information, please refer to
            [this](https://www.iras.gov.sg/irashome/Businesses/Employers/Tax-Clearance-for-Foreign-SPR-Employees/Getting-Tax-Clearance--A-Step-by-Step-Guide/)
          properties:
            value:
              type: string
              maxLength: 1
              enum:
                - 'Y'
                - 'N'
              example: 'N'
        category:
          type: object
          description: Type of 'Notice of Assessment' (NOA)
          properties:
            value:
              type: string
              enum:
                - ADDITIONAL
                - AMENDED
                - ORIGINAL
                - REPAYMENT
              example: ORIGINAL
    NOABasic:
      type: object
      properties:
        amount:
          type: object
          description: Assessable Income
          properties:
            value:
              type: number
              format: double
              example: 100000.01
        yearofassessment:
          type: object
          description: >-
            The second latest annual assessable income available from IRAS
            within the past 3 years.
          properties:
            value:
              type: string
              pattern: '[0-9]{4}'
              maxLength: 4
              example: '2018'
    PhoneNumLocal:
      type: object
      properties:
        prefix:
          type: object
          description: >-
            Prefix of Phone Number. Defaults to '+'. If phone number is blank,
            prefix will be returned as blank.
          properties:
            value:
              type: string
              default: +
              maxLength: 1
              example: +
        areacode:
          type: object
          description: >-
            Area Code of Phone Number. Default to '65'. If phone number is
            blank, code will be returned as blank.
          properties:
            value:
              type: string
              default: '65'
              maxLength: 3
              example: '65'
        nbr:
          type: object
          description: Phone Number.
          properties:
            value:
              type: string
              maxLength: 12
              example: '66132665'
    academicqualifications:
      type: object
      title: Academic Qualifications
      description: Academic Qualifications achieved
      properties:
        transcripts:
          type: array
          description: Transcript of qualification
          items:
            type: object
            properties:
              name:
                type: object
                description: Qualification's Name
                properties:
                  value:
                    type: string
                    example: >-
                      SINGAPORE-CAMBRIDGE GENERAL CERTIFICATE OF EDUCATION
                      ORDINARY LEVEL
              yearattained:
                type: object
                description: >-
                  Year this qualification was attained


                  See "date-fullyear" in
                  http://xml2rfc.ietf.org/public/rfc/html/rfc3339.html#anchor14'
                properties:
                  value:
                    type: string
                    format: date
                    example: '2018'
              results:
                type: array
                items:
                  type: object
                  properties:
                    subject:
                      type: object
                      description: Subject taken
                      properties:
                        value:
                          type: string
                          example: English Language
                    level:
                      type: object
                      description: Level of subject taken
                      properties:
                        value:
                          type: string
                          example: Ordinary
                    grade:
                      type: object
                      description: Grade attained
                      properties:
                        value:
                          type: string
                          example: A
                    subsubject:
                      type: object
                      description: Optional Sub Subject taken
                      properties:
                        value:
                          type: string
                          example: SPECIAL PAPER
                    subgrade:
                      type: object
                      description: Optional grade attained for subSubject
                      properties:
                        value:
                          type: string
                          example: One
              explanatorynotes:
                type: object
                description: Explanatory Notes
                properties:
                  value:
                    type: string
        certificates:
          type: array
          description: Electronic Certificates Uploaded
          items:
            type: object
            description: Electronic Certificate
            properties:
              name:
                type: object
                description: File name of the electronic certificate
                properties:
                  value:
                    type: string
                    maxlength: 255
                    example: nus.opencert
              content:
                type: object
                description: 'File content of the electronic certificate, Base64 encoded'
                properties:
                  value:
                    type: string
              opencertificate:
                type: object
                description: >-
                  Open Certificate Information


                  Note: The test environment for OpenCert is at
                  https://dev.opencerts.io/ while production is

                  at https://opencerts.io/
                properties:
                  id:
                    type: object
                    description: The OpenCert serial number.
                    properties:
                      value:
                        type: string
                        example: 100000000343840
                  primary:
                    type: object
                    description: >-
                      Indicate whether this open certificate is primary
                      certificate
                    properties:
                      value:
                        type: boolean
                        example: true
              opencertificateindicator:
                type: object
                description: Indicate whether this file is open certificate
                properties:
                  value:
                    type: boolean
                    example: true
    aliasname:
      type: object
      title: Alias
      description: >-
        Alias name of the Person.


        *Presentation Logic - If there is a value to `aliasname` (i.e. not
        empty), then `aliasname` should be displayed in a new line below
        `hanyupinyinname`, and prefixed with the ''@'' symbol i.e.
        "@`aliasname`".'*
      properties:
        value:
          type: string
          maxLength: 66
          description: value of the field.
          example: TRICIA TAN XIAO HUI
    billadd:
      type: object
      title: BillAdd
      description: >
        Billing Address of Person


        **Note:**

        - address can be either a Singapore address (type: 'SG') or non
        Singapore address (type: 'UNFORMATTED')

        - check the `type` discriminator property to differentiate between the
        two address formats
      oneOf:
        - $ref: '#/components/schemas/dataitem-address-sg'
        - $ref: '#/components/schemas/dataitem-address-unformatted'
      discriminator:
        propertyName: type
        mapping:
          SG: '#/components/schemas/dataitem-address-sg'
          UNFORMATTED: '#/components/schemas/dataitem-address-unformatted'
    birthcountry:
      type: object
      title: BirthCountry
      description: >-
        Country of Birth of Person.


        Refer to `country` in code table provided
        [HERE](https://public.cloud.myinfo.gov.sg/myinfobiz/myinfo-business-api-code-tables.xlsx)
        for description of each code.
      properties:
        code:
          type: string
          maxLength: 2
          pattern: '[a-zA-Z]{2}'
          description: ''
          example: SG
        desc:
          type: string
          maxLength: 300
          description: ''
          example: SINGAPORE
    childrenbirthrecords:
      type: object
      properties:
        birthcertno:
          type: object
          description: Birth certificate number of child.
          properties:
            value:
              type: string
              maxLength: 15
              example: S5562882C
        name:
          type: object
          description: Full Name of child
          properties:
            value:
              type: string
              maxLength: 66
              example: Jo Tan Pei Ni
        hanyupinyinname:
          type: object
          description: >-
            Han Yu Pin Yin name of child.


            *Presentation Logic - If there is a value to `hanyupinyinname` (i.e.
            not empty), then `hanyupinyinname` should be displayed in a new line
            below `name`, and formatted with round brackets i.e.
            \"(`hanyupinyinname`)\".*
          properties:
            value:
              type: string
              maxLength: 66
              example: Cheng Pei Ni
        aliasname:
          type: object
          description: >-
            Alias name of child.


            *Presentation Logic - If there is a value to `aliasname` (i.e. not
            empty), then `aliasname` should be displayed in a new line below
            `hanyupinyinname`, and prefixed with the ''@'' symbol i.e.
            \"@`aliasname`\".*
          properties:
            value:
              type: string
              maxLength: 66
              example: ''
        hanyupinyinaliasname:
          type: object
          description: >-
            Han Yu Pin Yin Alias name of child.


            *Presentation Logic - If there is a value to `hanyupinyinaliasname`
            (i.e. not empty), then `hanyupinyinaliasname` should be displayed in
            a new line below `aliasname`, and prefixed with the ''@'' symbol
            i.e. \"@`hanyupinyinaliasname`\".*
          properties:
            value:
              type: string
              maxLength: 66
              example: ''
        marriedname:
          type: object
          description: >-
            Married name of child.


            *Presentation Logic - If there is a value to `marriedname` (i.e. not
            empty), then `marriedname` should be displayed in a new line below
            `hanyupinyinaliasname`.*
          properties:
            value:
              type: string
              maxLength: 66
              example: ''
        sex:
          type: object
          description: |-
            Sex of child. Possible values:

            * 'F' - FEMALE
            * 'M' - MALE
            * 'U' - UNKNOWN
          properties:
            code:
              type: string
              maxLength: 1
              enum:
                - F
                - M
                - U
              example: F
            desc:
              type: string
              maxLength: 300
              enum:
                - FEMALE
                - MALE
                - UNKNOWN
              example: FEMALE
        race:
          type: object
          description: >
            Race of child.


            Refer to the [Code reference tables](#section/Support) in the
            Support section for list of possible values.
          properties:
            code:
              type: string
              maxLength: 2
              pattern: '[a-zA-Z]{2}'
              example: CN
            desc:
              type: string
              maxLength: 300
              example: CHINESE
        secondaryrace:
          type: object
          description: >-
            Secondary Race of child.


            Refer to the [Code reference tables](#section/Support) in the
            Support section for list of possible values.
          properties:
            code:
              type: string
              maxLength: 2
              pattern: '[a-zA-Z]{2}'
              example: ''
            desc:
              type: string
              maxLength: 300
              example: ''
        dialect:
          type: object
          description: >-
            Dialect of child.


            Refer to the [Code reference tables](#section/Support) in the
            Support section for list of possible values.
          properties:
            code:
              type: string
              maxLength: 2
              pattern: '[a-zA-Z]{2}'
              example: HK
            desc:
              type: string
              maxLength: 300
              example: HOKKIEN
        lifestatus:
          type: object
          description: |-
            Life Status of child. Possible values:

            * A - ALIVE
            * D - DECEASED
          properties:
            code:
              type: string
              enum:
                - A
                - D
              example: D
            desc:
              type: string
              enum:
                - ALIVE
                - DECEASED
              example: DECEASED
        dob:
          type: object
          description: >-
            Date of Birth of child.


            See "full-date" in
            http://xml2rfc.ietf.org/public/rfc/html/rfc3339.html#anchor14
          properties:
            value:
              type: string
              format: date
              example: '2011-09-10'
        tob:
          type: object
          description: |-
            Time of Birth of child.

            Format: HHMM
          properties:
            value:
              type: string
              maxLength: 4
              example: 0901
      allOf:
        - $ref: '#/components/schemas/DataFieldProperties'
    countryofmarriage:
      type: object
      title: CountryOfMarriage
      description: >-
        Country of the latest marriage.



        **Note:** This field must be made **editable** on your digital service
        form even though `source` is '1' (Government Verified).
      properties:
        code:
          type: string
          maxLength: 2
          description: null
          example: SG
        desc:
          type: string
          maxLength: 2
          description: null
          example: SINGAPORE
    cpfbalances:
      type: object
      title: CPFBalances
      description: >-
        CPF Balances of Person in SGD.


        'ra' will not appear in the results if user does not have a Retirement
        Account.
      properties:
        ma:
          type: object
          description: Amount Balance in CPF-MA
          properties:
            value:
              type: number
              format: double
              example: 11470.71
        oa:
          type: object
          description: Amount Balance in CPF-OA
          properties:
            value:
              type: number
              format: double
              example: 1581.48
        sa:
          type: object
          description: Amount Balance in CPF-SA
          properties:
            value:
              type: number
              format: double
              example: 21967.09
        ra:
          type: object
          description: Amount Balance in CPF-RA
          properties:
            value:
              type: number
              format: double
              example: 0.01
    cpfcontributions:
      type: object
      title: CPFContributions
      description: >
        Employer CPF Contributions of Person in SGD. Does not include any
        non-employer contributions.

        Maximum past 15 months' of contributions.
      properties:
        history:
          type: array
          items:
            type: object
            description: CPF contribution
            properties:
              employer:
                type: object
                description: Employer who paid the Contribution.
                properties:
                  value:
                    type: string
                    maxLength: 80
                    example: Crystal Horse Invest Pte Ltd
              date:
                type: object
                description: >-
                  Date of Contribution Paid. See "full-date" in
                  http://xml2rfc.ietf.org/public/rfc/htm
                properties:
                  value:
                    type: string
                    format: date
                    example: '2017-03-01'
              month:
                type: object
                description: 'Month for which CPF Contribution was paid. Format: YYYY-MM'
                properties:
                  value:
                    type: string
                    maxLength: 7
                    example: 2017-02
              amount:
                type: object
                description: Amount of contribution in SGD
                properties:
                  value:
                    type: number
                    format: double
                    example: 500
          example:
            - date:
                value: '2016-12-01'
              amount:
                value: 500
              month:
                value: 2016-11
              employer:
                value: Crystal Horse Invest Pte Ltd
            - date:
                value: '2016-12-12'
              amount:
                value: 500
              month:
                value: 2016-12
              employer:
                value: Crystal Horse Invest Pte Ltd
            - date:
                value: '2016-12-21'
              amount:
                value: 500
              month:
                value: 2016-12
              employer:
                value: Crystal Horse Invest Pte Ltd
            - date:
                value: '2017-01-01'
              amount:
                value: 500
              month:
                value: 2016-12
              employer:
                value: Crystal Horse Invest Pte Ltd
            - date:
                value: '2017-01-12'
              amount:
                value: 500
              month:
                value: 2017-01
              employer:
                value: Crystal Horse Invest Pte Ltd
            - date:
                value: '2017-01-21'
              amount:
                value: 500
              month:
                value: 2017-01
              employer:
                value: Crystal Horse Invest Pte Ltd
            - date:
                value: '2017-02-01'
              amount:
                value: 500
              month:
                value: 2017-01
              employer:
                value: Crystal Horse Invest Pte Ltd
            - date:
                value: '2017-02-12'
              amount:
                value: 500
              month:
                value: 2017-02
              employer:
                value: Crystal Horse Invest Pte Ltd
            - date:
                value: '2017-02-21'
              amount:
                value: 500
              month:
                value: 2017-02
              employer:
                value: Crystal Horse Invest Pte Ltd
            - date:
                value: '2017-03-01'
              amount:
                value: 500
              month:
                value: 2017-02
              employer:
                value: Crystal Horse Invest Pte Ltd
            - date:
                value: '2017-03-12'
              amount:
                value: 500
              month:
                value: 2017-03
              employer:
                value: Crystal Horse Invest Pte Ltd
            - date:
                value: '2017-03-21'
              amount:
                value: 500
              month:
                value: 2017-03
              employer:
                value: Crystal Horse Invest Pte Ltd
            - date:
                value: '2017-04-01'
              amount:
                value: 500
              month:
                value: 2017-03
              employer:
                value: Crystal Horse Invest Pte Ltd
            - date:
                value: '2017-04-12'
              amount:
                value: 500
              month:
                value: 2017-04
              employer:
                value: Crystal Horse Invest Pte Ltd
            - date:
                value: '2017-04-21'
              amount:
                value: 500
              month:
                value: 2017-04
              employer:
                value: Crystal Horse Invest Pte Ltd
            - date:
                value: '2017-05-01'
              amount:
                value: 500
              month:
                value: 2017-04
              employer:
                value: Crystal Horse Invest Pte Ltd
            - date:
                value: '2017-05-12'
              amount:
                value: 500
              month:
                value: 2017-05
              employer:
                value: Crystal Horse Invest Pte Ltd
            - date:
                value: '2017-05-21'
              amount:
                value: 500
              month:
                value: 2017-05
              employer:
                value: Crystal Horse Invest Pte Ltd
            - date:
                value: '2017-06-01'
              amount:
                value: 500
              month:
                value: 2017-05
              employer:
                value: Crystal Horse Invest Pte Ltd
            - date:
                value: '2017-06-12'
              amount:
                value: 500
              month:
                value: 2017-06
              employer:
                value: Crystal Horse Invest Pte Ltd
            - date:
                value: '2017-06-21'
              amount:
                value: 500
              month:
                value: 2017-06
              employer:
                value: Crystal Horse Invest Pte Ltd
            - date:
                value: '2017-07-01'
              amount:
                value: 500
              month:
                value: 2017-06
              employer:
                value: Crystal Horse Invest Pte Ltd
            - date:
                value: '2017-07-12'
              amount:
                value: 500
              month:
                value: 2017-07
              employer:
                value: Crystal Horse Invest Pte Ltd
            - date:
                value: '2017-07-21'
              amount:
                value: 500
              month:
                value: 2017-07
              employer:
                value: Crystal Horse Invest Pte Ltd
            - date:
                value: '2017-08-01'
              amount:
                value: 500
              month:
                value: 2017-07
              employer:
                value: Crystal Horse Invest Pte Ltd
            - date:
                value: '2017-08-12'
              amount:
                value: 750
              month:
                value: 2017-08
              employer:
                value: Delta Marine Consultants PL
            - date:
                value: '2017-08-21'
              amount:
                value: 750
              month:
                value: 2017-08
              employer:
                value: Delta Marine Consultants PL
            - date:
                value: '2017-09-01'
              amount:
                value: 750
              month:
                value: 2017-08
              employer:
                value: Delta Marine Consultants PL
            - date:
                value: '2017-09-12'
              amount:
                value: 750
              month:
                value: 2017-09
              employer:
                value: Delta Marine Consultants PL
            - date:
                value: '2017-09-21'
              amount:
                value: 750
              month:
                value: 2017-09
              employer:
                value: Delta Marine Consultants PL
            - date:
                value: '2017-10-01'
              amount:
                value: 750
              month:
                value: 2017-09
              employer:
                value: Delta Marine Consultants PL
            - date:
                value: '2017-10-12'
              amount:
                value: 750
              month:
                value: 2017-10
              employer:
                value: Delta Marine Consultants PL
            - date:
                value: '2017-10-21'
              amount:
                value: 750
              month:
                value: 2017-10
              employer:
                value: Delta Marine Consultants PL
            - date:
                value: '2017-11-01'
              amount:
                value: 750
              month:
                value: 2017-10
              employer:
                value: Delta Marine Consultants PL
            - date:
                value: '2017-11-12'
              amount:
                value: 750
              month:
                value: 2017-11
              employer:
                value: Delta Marine Consultants PL
            - date:
                value: '2017-11-21'
              amount:
                value: 750
              month:
                value: 2017-11
              employer:
                value: Delta Marine Consultants PL
            - date:
                value: '2017-12-01'
              amount:
                value: 750
              month:
                value: 2017-11
              employer:
                value: Delta Marine Consultants PL
            - date:
                value: '2017-12-12'
              amount:
                value: 750
              month:
                value: 2017-12
              employer:
                value: Delta Marine Consultants PL
            - date:
                value: '2017-12-21'
              amount:
                value: 750
              month:
                value: 2017-12
              employer:
                value: Delta Marine Consultants PL
            - date:
                value: '2018-01-01'
              amount:
                value: 750
              month:
                value: 2017-12
              employer:
                value: Delta Marine Consultants PL
            - date:
                value: '2018-01-12'
              amount:
                value: 750
              month:
                value: 2018-01
              employer:
                value: Delta Marine Consultants PL
            - date:
                value: '2018-01-21'
              amount:
                value: 750
              month:
                value: 2018-01
              employer:
                value: Delta Marine Consultants PL
    cpftransactions:
      type: object
      title: CPFTransactions
      description: |
        CPF Transaction History of Person in SGD.
        Maximum past 15 months' of transactions.
      properties:
        history:
          type: array
          items:
            type: object
            description: CPF transaction
            properties:
              txntype:
                type: object
                description: Type of transaction
                properties:
                  code:
                    type: string
                    maximum: 3
                    example: CON
                  desc:
                    type: string
                    example: Contributions/Government Cash Grant/Government Top-up
              accountno:
                type: object
                description: Account Number. May be present if txntype code is 'TRF'.
                properties:
                  value:
                    type: string
              month:
                type: object
                description: |-
                  Month of transaction. Format: YYYY-MM

                  Present if txntype code is 'CON'/'RFD'/'ADJ'
                properties:
                  value:
                    type: string
                    maxLength: 7
                    example: 2017-02
              date:
                type: object
                description: >-
                  Date of Transaction. See "full-date" in
                  http://xml2rfc.ietf.org/public/rfc/htm
                properties:
                  value:
                    type: string
                    format: date
                    maximum: 10
                    example: '2017-03-01'
              referenceno:
                type: object
                description: Footer reference
                properties:
                  value:
                    type: string
              oatxnamt:
                type: object
                description: Transaction Amount to Ordinary Account in SGD
                properties:
                  value:
                    type: number
                    format: double
                    example: 500
              satxnamt:
                type: object
                description: Transaction Amount to Special Account in SGD
                properties:
                  value:
                    type: number
                    format: double
                    example: 500
              matxnamt:
                type: object
                description: Transaction Amount to Medisave Account in SGD
                properties:
                  value:
                    type: number
                    format: double
                    example: 500
              ratxnamt:
                type: object
                description: >-
                  Transaction Amount to Retirement Account in SGD. Only present
                  if user has Retirement Account
                properties:
                  value:
                    type: number
                    format: double
                    example: 500
            example:
              - date:
                  value: '2019-01-01'
                txntype:
                  code: TRF
                  desc: Transfer between accounts
                accountno:
                  value: 1234567
                referenceno:
                  value: A
                txnmonth:
                  value: 2019-01
                oatxnamt:
                  value: '100.00'
                satxnamt:
                  value: '0.00'
                matxnamt:
                  value: '0.00'
              - date:
                  value: '2019-02-01'
                txntype:
                  code: CON
                  desc: Contributions/Government Cash Grant/Government Top-Up
                referenceno:
                  value: A
                txnmonth:
                  value: 2019-02
                oatxnamt:
                  value: '900.00'
                satxnamt:
                  value: '150.00'
                matxnamt:
                  value: '150.00'
              - date:
                  value: '2019-02-01'
                txntype:
                  code: CON
                  desc: Contributions/Government Cash Grant/Government Top-Up
                referenceno:
                  value: B
                txnmonth:
                  value: 2019-02
                oatxnamt:
                  value: '900.00'
                satxnamt:
                  value: '150.00'
                matxnamt:
                  value: '150.00'
        footers:
          type: array
          items:
            type: object
            properties:
              message:
                type: object
                properties:
                  value:
                    type: string
                    example: 'REF A: EMPLOYER XXXX'
          example:
            - message:
                value: 'REF A: EMPLOYER XXXX'
            - message:
                value: 'B: EMPLOYER YYYY'
    cpfhousingwithdrawal:
      type: object
      title: CPFHousingWithdrawal
      description: CPF Housing Withdrawal of Person. Amounts in SGD.
      properties:
        withdrawaldetails:
          type: array
          description: Withdrawal details for properties
          items:
            type: object
            properties:
              address:
                type: object
                description: |
                  Registered Address of Property which withdrawal is made.

                    **Note:**
                    - address can be either Singapore address (type: 'SG') or non Singapore address (type: 'UNFORMATTED')
                    - check the `type` discriminator property to differentiate between the two address formats
                oneOf:
                  - $ref: '#/components/schemas/AddressSG'
                  - $ref: '#/components/schemas/AddressUnformatted'
                discriminator:
                  propertyName: type
                  mapping:
                    SG: '#/components/schemas/AddressSG'
                    UNFORMATTED: '#/components/schemas/AddressUnformatted'
              accruedinterestamt:
                type: object
                description: null
                properties:
                  value:
                    type: number
                    format: double
                    example: 1581.48
              monthlyinstalmentamt:
                type: object
                description: null
                properties:
                  value:
                    type: number
                    format: double
                    example: 1196.09
              principalwithdrawalamt:
                type: object
                description: null
                properties:
                  value:
                    type: number
                    format: double
                    example: 2897.01
              totalamountofcpfallowedforproperty:
                type: object
                description: null
                properties:
                  value:
                    type: number
                    format: double
                    example: 10000.01
    cpfemployers:
      type: object
      title: CPFEmployers
      description: |
        Employers who paid CPF Contributions. Maximum up to past 14 months.
      properties:
        history:
          type: array
          items:
            type: object
            description: CPF employers
            properties:
              employer:
                type: object
                description: Employer who paid the Contribution.
                properties:
                  value:
                    type: string
                    maxLength: 80
                    example: Crystal Horse Invest Pte Ltd
              month:
                type: object
                description: 'Month for which CPF Contribution was paid. Format: YYYY-MM'
                properties:
                  value:
                    type: string
                    format: date
                    example: 2017-03
          example:
            - month:
                value: 2016-11
              employer:
                value: Crystal Horse Invest Pte Ltd
            - month:
                value: 2016-12
              employer:
                value: Crystal Horse Invest Pte Ltd
            - month:
                value: 2016-12
              employer:
                value: Crystal Horse Invest Pte Ltd
            - month:
                value: 2016-12
              employer:
                value: Crystal Horse Invest Pte Ltd
            - month:
                value: 2017-01
              employer:
                value: Crystal Horse Invest Pte Ltd
            - month:
                value: 2017-01
              employer:
                value: Crystal Horse Invest Pte Ltd
            - month:
                value: 2017-01
              employer:
                value: Crystal Horse Invest Pte Ltd
            - month:
                value: 2017-02
              employer:
                value: Crystal Horse Invest Pte Ltd
            - month:
                value: 2017-02
              employer:
                value: Crystal Horse Invest Pte Ltd
            - month:
                value: 2017-02
              employer:
                value: Crystal Horse Invest Pte Ltd
            - month:
                value: 2017-03
              employer:
                value: Crystal Horse Invest Pte Ltd
            - month:
                value: 2017-03
              employer:
                value: Crystal Horse Invest Pte Ltd
            - month:
                value: 2017-03
              employer:
                value: Crystal Horse Invest Pte Ltd
            - month:
                value: 2017-04
              employer:
                value: Crystal Horse Invest Pte Ltd
            - month:
                value: 2017-04
              employer:
                value: Crystal Horse Invest Pte Ltd
            - month:
                value: 2017-04
              employer:
                value: Crystal Horse Invest Pte Ltd
            - month:
                value: 2017-05
              employer:
                value: Crystal Horse Invest Pte Ltd
            - month:
                value: 2017-05
              employer:
                value: Crystal Horse Invest Pte Ltd
            - month:
                value: 2017-05
              employer:
                value: Crystal Horse Invest Pte Ltd
            - month:
                value: 2017-06
              employer:
                value: Crystal Horse Invest Pte Ltd
            - month:
                value: 2017-06
              employer:
                value: Crystal Horse Invest Pte Ltd
            - month:
                value: 2017-06
              employer:
                value: Crystal Horse Invest Pte Ltd
            - month:
                value: 2017-07
              employer:
                value: Crystal Horse Invest Pte Ltd
            - month:
                value: 2017-07
              employer:
                value: Crystal Horse Invest Pte Ltd
            - month:
                value: 2017-07
              employer:
                value: Crystal Horse Invest Pte Ltd
            - month:
                value: 2017-08
              employer:
                value: Delta Marine Consultants PL
            - month:
                value: 2017-08
              employer:
                value: Delta Marine Consultants PL
            - month:
                value: 2017-08
              employer:
                value: Delta Marine Consultants PL
            - month:
                value: 2017-09
              employer:
                value: Delta Marine Consultants PL
            - month:
                value: 2017-09
              employer:
                value: Delta Marine Consultants PL
            - month:
                value: 2017-09
              employer:
                value: Delta Marine Consultants PL
            - month:
                value: 2017-10
              employer:
                value: Delta Marine Consultants PL
            - month:
                value: 2017-10
              employer:
                value: Delta Marine Consultants PL
            - month:
                value: 2017-10
              employer:
                value: Delta Marine Consultants PL
            - month:
                value: 2017-11
              employer:
                value: Delta Marine Consultants PL
            - month:
                value: 2017-11
              employer:
                value: Delta Marine Consultants PL
            - month:
                value: 2017-11
              employer:
                value: Delta Marine Consultants PL
            - month:
                value: 2017-12
              employer:
                value: Delta Marine Consultants PL
            - month:
                value: 2017-12
              employer:
                value: Delta Marine Consultants PL
            - month:
                value: 2017-12
              employer:
                value: Delta Marine Consultants PL
            - month:
                value: 2018-01
              employer:
                value: Delta Marine Consultants PL
            - month:
                value: 2018-01
              employer:
                value: Delta Marine Consultants PL
    dialect:
      type: object
      title: Dialect
      description: >-
        Dialect of Person.


        Refer to the [Code reference tables](#section/Support) in the Support
        section for list of possible values.
      properties:
        code:
          type: string
          maxLength: 2
          pattern: '[a-zA-Z]{2}'
          description: ''
          example: SG
        desc:
          type: string
          maxLength: 300
          description: ''
          example: SWISS GERMAN
    divorcedate:
      type: object
      title: DivorceDate
      description: >
        Last Divorce Date of Person.



        **Note:** This field must be made **editable** on your digital service
        form even though `source` is '1' (Government Verified).
      properties:
        value:
          type: string
          format: date
          description: >-
            Value of data field.


            See "full-date" in
            http://xml2rfc.ietf.org/public/rfc/html/rfc3339.html#anchor14
          example: ''
    dob:
      type: object
      title: DOB
      description: Date of Birth of Person.
      properties:
        value:
          type: string
          format: date
          description: >-
            Value of data field. 

            Format can be one of the below (with reference to
            http://xml2rfc.ietf.org/public/rfc/html/rfc3339.html#anchor14):

            - full-date

            - date-fullyear "-" date-month

            - date-fullyear 
          example: '1958-05-17'
    drivinglicence:
      type: object
      description: |
        Driving Licence details of Person.
      properties:
        comstatus:
          type: object
          description: |-
            Status of Certificate of Merit. Possible values:

            * Y - ELIGIBLE
            * N - NOT ELIGIBLE
          properties:
            code:
              type: string
              maxLength: 1
              enum:
                - 'Y'
                - 'N'
              example: 'Y'
            desc:
              type: string
              description: ''
              enum:
                - ELIGIBLE
                - NOT ELIGIBLE
              example: ELIGIBLE
        totaldemeritpoints:
          type: object
          description: Total Demerit Points
          properties:
            value:
              type: integer
              maxLength: 2
              example: 0
        suspension:
          type: object
          description: ''
          properties:
            startdate:
              type: object
              description: Suspension Start Date
              properties:
                value:
                  type: string
                  format: date
                  maxLength: 10
                  example: ''
            enddate:
              type: object
              description: Suspension End Date
              properties:
                value:
                  type: string
                  format: date
                  maxLength: 10
                  example: ''
        disqualification:
          type: object
          description: ''
          properties:
            startdate:
              type: object
              description: Disqualification Start Date
              properties:
                value:
                  type: string
                  format: date
                  maxLength: 10
                  example: ''
            enddate:
              type: object
              description: Disqualification End Date
              properties:
                value:
                  type: string
                  format: date
                  maxLength: 10
                  example: ''
        revocation:
          type: object
          description: ''
          properties:
            startdate:
              type: object
              description: Revocation Start Date
              properties:
                value:
                  type: string
                  format: date
                  maxLength: 10
                  example: ''
            enddate:
              type: object
              description: Revocation End Date
              properties:
                value:
                  type: string
                  format: date
                  maxLength: 10
                  example: ''
        pdl:
          type: object
          description: Provisional Driving Licence (PDL)
          properties:
            validity:
              type: object
              description: |-
                Validity of PDL. Possible values:

                * V - VALID
                * E - EXPIRED
                * I - INVALID
                * N - NOT HOLDING
              properties:
                code:
                  type: string
                  maxLength: 1
                  enum:
                    - V
                    - E
                    - I
                    - 'N'
                  example: V
                desc:
                  type: string
                  description: ''
                  enum:
                    - VALID
                    - EXPIRED
                    - INVALID
                    - NOT HOLDING
                  example: VALID
            expirydate:
              type: object
              description: PDL Expiry Date
              properties:
                value:
                  type: string
                  format: date
                  maxLength: 10
                  example: '2020-06-15'
            classes:
              type: array
              description: PDL Classes
              items:
                type: object
                properties:
                  class:
                    type: object
                    properties:
                      value:
                        type: string
                        maxLength: 2
              example:
                - class:
                    value: 2A
                - class:
                    value: 3A
        qdl:
          type: object
          description: Qualified Driving Licence (QDL)
          properties:
            validity:
              type: object
              description: |-
                Validity of QDL. Possible values:

                * V - VALID
                * E - EXPIRED
                * I - INVALID
                * N - NOT HOLDING
              properties:
                code:
                  type: string
                  maxLength: 1
                  enum:
                    - V
                    - E
                    - I
                    - 'N'
                  example: V
                desc:
                  type: string
                  description: ''
                  enum:
                    - VALID
                    - EXPIRED
                    - INVALID
                    - NOT HOLDING
                  example: VALID
            expirydate:
              type: object
              description: QDL Expiry Date
              properties:
                value:
                  type: string
                  format: date
                  maxLength: 10
                  example: '2020-06-15'
            classes:
              type: array
              description: 'QDL Classes. Includes Issue Date (e.g. 2B, 2018-01-01)'
              items:
                type: object
                properties:
                  class:
                    type: object
                    properties:
                      value:
                        type: string
                        maxLength: 2
                  issuedate:
                    type: object
                    properties:
                      value:
                        type: string
                        format: date
                        maxLength: 10
              example:
                - class:
                    value: 2A
                  issuedate:
                    value: '2018-06-06'
                - class:
                    value: 3A
                  issuedate:
                    value: '2018-06-06'
        photocardserialno:
          type: object
          description: Serial Number of the Photo Card
          properties:
            value:
              type: string
              maxLength: 10
              example: '115616'
    edulevel:
      type: object
      title: EduLevel
      description: >-
        Highest Education Level of Person.


        * '0' - NO FORMAL QUALIFICATION / PRE-PRIMARY / LOWER PRIMARY

        * '1' - PRIMARY

        * '2' - LOWER SECONDARY

        * '3' - SECONDARY

        * '4' - POST-SECONDARY (NON-TERTIARY): GENERAL & VOCATION

        * '5' - POLYTECHNIC DIPLOMA

        * '6' - PROFESSIONAL QUALIFICATION AND OTHER DIPLOMA

        * '7' - BACHELOR'S OR EQUIVALENT

        * '8' - POSTGRADUATE DIPLOMA / CERTIFICATE (EXCLUDING MASTER'S AND
        DOCTORATE)

        * '9' - MASTER'S AND DOCTORATE OR EQUIVALENT

        * 'N' - MODULAR CERTIFICATION (NON-AWARD COURSES / NON-FULL
        QUALIFICATIONS)
      properties:
        code:
          type: string
          description: null
          enum:
            - '0'
            - '1'
            - '2'
            - '3'
            - '4'
            - '5'
            - '6'
            - '7'
            - '8'
            - '9'
            - 'N'
          example: '7'
        desc:
          type: string
          enum:
            - NO FORMAL QUALIFICATION / PRE-PRIMARY / LOWER PRIMARY
            - PRIMARY
            - LOWER SECONDARY
            - SECONDARY
            - 'POST-SECONDARY (NON-TERTIARY): GENERAL & VOCATION'
            - POLYTECHNIC DIPLOMA
            - PROFESSIONAL QUALIFICATION AND OTHER DIPLOMA
            - BACHELOR'S OR EQUIVALENT
            - >-
              POSTGRADUATE DIPLOMA / CERTIFICATE (EXCLUDING MASTER'S AND
              DOCTORATE)
            - MASTER'S AND DOCTORATE OR EQUIVALENT
            - >-
              MODULAR CERTIFICATION (NON-AWARD COURSES / NON-FULL
              QUALIFICATIONS)
          example: BACHELOR'S OR EQUIVALENT
    email:
      type: object
      title: Email
      description: Email Address of Person.
      properties:
        value:
          type: string
          maxLength: 320
          description: Value of data field.
          example: test@gmail.com
    employment:
      type: object
      title: Employment
      description: Name of Employer.
      properties:
        value:
          type: string
          maxLength: 124
          example: ALPHA
    employmentsector:
      type: object
      title: EmploymentSector
      description: |-
        Employment Sector of a FIN holder.

        **Note:** Only applies to a foreigner with a valid work pass.

        Some examples of possible values are: 
        * MANUFACTURING
        * CONSTRUCTION
        * RECLAMATION 
        * SERVICE
        * GRI-TECHNOLOGY
        * LANDSCAPING
        * INCINERATOR PLANT
        * MARINE SHIPYARD
        * PROCESS
        * HARBOURCRAFT
        * DOMESTIC
      properties:
        value:
          type: string
          example: MANUFACTURING
    gradyear:
      type: object
      title: GradYear
      description: 'Year of Graduation of Person. Format: YYYY'
      properties:
        value:
          type: string
          pattern: '[0-9]{4}'
          maxLength: 4
          example: '2006'
    hanyupinyinaliasname:
      type: object
      title: HanYuPinYinAlias
      description: >-
        Han Yu Pin Yin Alias name of the Person.


        *Presentation Logic - If there is a value to `hanyupinyinaliasname`
        (i.e. not empty), then `hanyupinyinaliasname` should be displayed in a
        new line below `aliasname`, and prefixed with the ''@'' symbol i.e.
        "@`hanyupinyinaliasname`".*
      properties:
        value:
          type: string
          maxLength: 66
          example: TRICIA CHEN XIAO HUI
    hanyupinyinname:
      type: object
      title: HanYuPinYin
      description: >-
        Han Yu Pin Yin name of the Person.


        *Presentation Logic - If there is a value to `hanyupinyinname` (i.e. not
        empty), then `hanyupinyinname` should be displayed in a new line below
        `name`, and formatted with round brackets i.e. "(`hanyupinyinname`)"'*
      properties:
        value:
          type: string
          maxLength: 66
          example: CHEN XIAO HUI
    hdbownership:
      type: object
      title: HDBOwnership
      description: >
        HDB Ownership details


        **TODO: is this tied to the registered address or the person (UINFIN) or
        both?**
      properties:
        noofowners:
          type: object
          description: >-
            Number of Owners. Note that this does not include executors,
            administrators or trustees.
          properties:
            value:
              type: integer
              maximum: 9
              example: 2
        address:
          allOf:
            - $ref: '#/components/schemas/AddressSG'
        hdbtype:
          allOf:
            - $ref: '#/components/schemas/hdbtype'
        leasecommencementdate:
          type: object
          description: >-
            Date from which the lease period starts. See "full-date" in
            http://xml2rfc.ietf.org/public/rfc/html/rfc3339.html#anchor14
          properties:
            value:
              type: string
              format: date
              example: '2008-06-13'
        termoflease:
          type: object
          description: >-
            Term of lease (in years) for the property computed from the lease
            commencement date.
          properties:
            value:
              type: integer
              maximum: 99
              example: 99
        dateofpurchase:
          type: object
          description: >-
            Effective date of flat purchase. See "full-date" in
            http://xml2rfc.ietf.org/public/rfc/html/rfc3339.html#anchor14
          properties:
            value:
              type: string
              format: date
              example: '2008-06-13'
        dateofownershiptransfer:
          type: object
          description: >-
            Effective date of partial transfer without monetary consideration
            (e.g. addition, deletion or substitution of a co-owner) for an HDB
            sold flat.


            For partial transfer of flat where at least one of the current owner
            remains in the household, the Date of Purchase remains unchanged
            while the date of transfer of ownership will be updated.


            For outright transfer where there is a total change of all owner(s),
            only the Date of Purchase will be updated.


            See "full-date" in
            http://xml2rfc.ietf.org/public/rfc/html/rfc3339.html#anchor14'
          properties:
            value:
              type: string
              format: date
              example: '2018-06-13'
        loangranted:
          type: object
          description: The amount of housing loan granted to owner(s) by HDB in SGD.
          properties:
            value:
              type: number
              format: double
              example: 310000.01
        originalloanrepayment:
          type: object
          description: >-
            The number of years of loan repaymnet opted by owner(s) at the time
            the loan is first granted to him/her.
          properties:
            value:
              type: integer
              maximum: 99
              example: 25
        balanceloanrepayment:
          type: object
          description: >-
            The remaining term of repayment for the loan in the format `years` +
            `months`.
          properties:
            years:
              type: object
              properties:
                value:
                  type: integer
                  maximum: 99
                  example: 2
            months:
              type: object
              properties:
                value:
                  type: integer
                  maximum: 99
                  example: 6
        outstandingloanbalance:
          type: object
          description: The amount of outstanding HDB loan owed by owner(s) in SGD.
          properties:
            value:
              type: number
              format: double
              example: 50000.01
        monthlyloaninstalment:
          type: object
          description: >-
            The amount of monthly instalment the owner(s) have to pay for
            his/her loan in SGD.
          properties:
            value:
              type: number
              format: double
              example: 1000.01
    hdbtype:
      type: object
      title: HDBType
      description: >-
        Flat Type of the HDB flat.


        **Note 1:** that this excludes Rental Flats, Pre-War SIT flat, PSA flat,
        HUDC flat, Executive Condominium and Shophouse.


        **Note 2:** If `housingtype` is available, this value will be null.


        **Note 3:** If `housingtype` &  `hdbtype` are unavailable, make this
        field user editable.


        * '111' - 1-ROOM FLAT (HDB)

        * '112' - 2-ROOM FLAT (HDB)

        * '113' - 3-ROOM FLAT (HDB)

        * '114' - 4-ROOM FLAT (HDB)

        * '115' - 5-ROOM FLAT (HDB)

        * '116' - EXECUTIVE FLAT (HDB)

        * '118' - STUDIO APARTMENT (HDB)
      properties:
        code:
          type: string
          description: null
          enum:
            - '111'
            - '112'
            - '113'
            - '114'
            - '115'
            - '116'
            - '118'
          example: '112'
        desc:
          type: string
          description: ''
          enum:
            - 1-ROOM FLAT (HDB)
            - 2-ROOM FLAT (HDB)
            - 3-ROOM FLAT (HDB)
            - 4-ROOM FLAT (HDB)
            - 5-ROOM FLAT (HDB)
            - EXECUTIVE FLAT (HDB)
            - STUDIO APARTMENT (HDB)
          example: 2-ROOM FLAT (HDB)
    homeno:
      type: object
      title: HomeNo
      description: Home Contact Number of Person.
      allOf:
        - $ref: '#/components/schemas/PhoneNumLocal'
    householdincome:
      type: object
      title: HouseholdIncome
      description: Household Income of Person in SGD.
      properties:
        high:
          type: object
          description: upper bound of the range of household income bracket
          properties:
            value:
              type: integer
              example: 5999
        low:
          type: object
          description: lower bound of the range of household income bracket
          properties:
            value:
              type: integer
              example: 5000
    housingtype:
      type: object
      title: HousingType
      description: >-
        Housing Type of Person (non-HDB only).


        **Note 1:** If `hdbtype` is available, this value will be null.


        **Note 2:** If `housingtype` &  `hdbtype` are unavailable, make this
        field user editable.


        Refer to `hdbtype` for detailed HDB type.


        * '121' - DETACHED HOUSE

        * '122' - SEMI-DETACHED HOUSE

        * '123' - TERRACE HOUSE

        * '131' - CONDOMINIUM

        * '132' - EXECUTIVE CONDOMINIUM

        * '139' - APARTMENT
      properties:
        code:
          type: string
          description: null
          enum:
            - '121'
            - '122'
            - '123'
            - '131'
            - '132'
            - '139'
          example: '123'
        desc:
          type: string
          description: ''
          enum:
            - DETACHED HOUSE
            - SEMI-DETACHED HOUSE
            - TERRACE HOUSE
            - CONDOMINIUM
            - EXECUTIVE CONDOMINIUM
            - APARTMENT
          example: TERRACE HOUSE
    vocationallicences:
      type: object
      title: VocationalLicences
      description: Vocational Licences.
      properties:
        licences:
          type: array
          items:
            type: object
            properties:
              number:
                type: object
                description: Unique licence number assigned by issuing agency
                properties:
                  value:
                    type: number
              name:
                type: object
                description: Licence name
                properties:
                  value:
                    type: String
              status:
                type: object
                description: Status of licence
                properties:
                  code:
                    type: string
                    enum:
                      - ACT
                      - IPA
                  desc:
                    type: string
                    enum:
                      - Active
                      - In-Principal Approval
              issuanceagency:
                type: object
                description: Agency that issued the licence
                properties:
                  code:
                    type: string
                    maxlength: 3
                  desc:
                    type: string
              issuedate:
                type: object
                description: >-
                  Licence issue date. See "full-date" in
                  http://xml2rfc.ietf.org/public/rfc/html/rfc3339.html#anchor14
                properties:
                  value:
                    type: string
              expirydate:
                type: object
                description: >-
                  Licence expiry date. See "full-date" in
                  http://xml2rfc.ietf.org/public/rfc/html/rfc3339.html#anchor14
                properties:
                  value:
                    type: string
    mailadd:
      type: object
      title: MailAdd
      description: >
        Mailing Address of Person


        **Note:**

        - address can be either a Singapore address (type: 'SG') or non
        Singapore address (type: 'UNFORMATTED')

        - check the `type` discriminator property to differentiate between the
        two address formats
      oneOf:
        - $ref: '#/components/schemas/dataitem-address-sg'
        - $ref: '#/components/schemas/dataitem-address-unformatted'
      discriminator:
        propertyName: type
        mapping:
          SG: '#/components/schemas/dataitem-address-sg'
          UNFORMATTED: '#/components/schemas/dataitem-address-unformatted'
    marital:
      type: object
      title: Marital
      description: >-
        Marital Status of Person.


        * '1' - SINGLE

        * '2' - MARRIED

        * '3' - WIDOWED

        * '5' - DIVORCED


        **Note:** This field must be made **editable** on your digital service
        form even though `source` is '1' (Government Verified).
      properties:
        code:
          type: string
          description: null
          enum:
            - 1
            - 2
            - 3
            - 5
          example: '2'
        desc:
          type: string
          description: null
          enum:
            - SINGLE
            - MARRIED
            - WIDOWED
            - DIVORCED
          example: MARRIED
    marriagecertno:
      type: object
      title: MarriageCertNo
      description: >-
        Certificate number of the latest marriage.



        **Note:** This field must be made **editable** on your digital service
        form even though `source` is '1' (Government Verified).
      properties:
        value:
          type: string
          maxLength: 50
          description: Value of data field.
          example: '123456789012345'
    marriagedate:
      type: object
      title: MarriageDate
      description: >
        Latest Marriage Date of Person.



        **Note:** This field must be made **editable** on your digital service
        form even though `source` is '1' (Government Verified).
      properties:
        value:
          type: string
          format: date
          description: >-
            Value of data field.


            See "full-date" in
            http://xml2rfc.ietf.org/public/rfc/html/rfc3339.html#anchor14
          example: '2007-01-01'
    marriedname:
      type: object
      title: MarriedName
      description: >-
        Married name of the Person.


        *Presentation Logic - If there is a value to `marriedname` (i.e. not
        empty), then `marriedname` should be displayed in a new line below
        `hanyupinyinaliasname`.*
      properties:
        value:
          type: string
          maxLength: 66
          description: 'value of the field, should be displayed as it is.'
          example: ''
    mobileno:
      type: object
      title: MobileNo
      description: Mobile Number of Person.
      allOf:
        - $ref: '#/components/schemas/PhoneNumLocal'
    name:
      type: object
      title: Name
      description: Full Name of the Person.
      properties:
        value:
          type: string
          maxLength: 66
          description: 'value of the field, should be displayed as it is.'
          example: TAN XIAO HUI
    nationality:
      type: object
      title: Nationality
      description: >-
        Nationality of Person.


        Refer to the [Code reference tables](#section/Support) in the Support
        section for list of possible values.
      properties:
        code:
          type: string
          maxLength: 2
          pattern: '[a-zA-Z]{2}'
          description: ''
          example: SG
        desc:
          type: string
          maxLength: 300
          description: ''
          example: SINGAPORE CITIZEN
    noahistory-basic:
      type: object
      title: History of Notice Of Assessment (Basic)
      description: Summary of latest 2 Notice of Assessments within the past three years.
      properties:
        noas:
          type: array
          items:
            $ref: '#/components/schemas/NOABasic'
    noahistory:
      type: object
      title: History of Notice Of Assessment
      description: >-
        Detailed breakdown of latest 2 Notice of Assessments within the past
        three years.
      properties:
        noas:
          type: array
          items:
            $ref: '#/components/schemas/NOA'
    occupation:
      type: object
      title: Occupation
      description: 'Occupation of Person. '
      properties:
        value:
          type: string
          maxLength: 100
          description: |-
            Free text.

            For SC/PR holders, blank will be returned.
          example: ''
    ownerprivate:
      type: object
      title: OwnerPrivate
      description: >-
        Ownership of Private Property Status of Person (based on IRAS
        information).


        * true

        * false

        * null (data not available)
      properties:
        value:
          type: boolean
          description: Value of data field.
          example: false
    passportexpirydate:
      type: object
      title: PassportExpiryDate
      description: Passport Expiry Date of Person.
      properties:
        value:
          type: string
          format: date
          description: >-
            Value of data field. See "full-date" in
            http://xml2rfc.ietf.org/public/rfc/html/rfc3339.html#anchor14
          example: '2020-01-01'
    passportnumber:
      type: object
      title: PassportNumber
      description: Passport Number of Person.
      properties:
        value:
          type: string
          maxLength: 25
          description: Value of data field.
          example: E35463874W
    race:
      type: object
      title: Race
      description: >-
        Race of Person.


        Refer to the [Code reference tables](#section/Support) in the Support
        section for list of possible values.
      properties:
        code:
          type: string
          maxLength: 2
          pattern: '[a-zA-Z]{2}'
          example: CN
        desc:
          type: string
          maxLength: 300
          example: CHINESE
    regadd:
      type: object
      title: RegAdd
      description: >-
        Registered Address of Person


        **Note:**

        - address can be either a Singapore address (type: 'SG') or non
        Singapore address (type: 'UNFORMATTED')

        - check the `type` discriminator property to differentiate between the
        two address formats
      oneOf:
        - $ref: '#/components/schemas/dataitem-address-sg'
        - $ref: '#/components/schemas/dataitem-address-unformatted'
      discriminator:
        propertyName: type
        mapping:
          SG: '#/components/schemas/dataitem-address-sg'
          UNFORMATTED: '#/components/schemas/dataitem-address-unformatted'
    residentialstatus:
      type: object
      title: ResidentialStatus
      description: >-
        Residential Status of Person. Applicable to Singapore Citizens and
        Permanent Residents.



        **Note:** This data item is not applicable for FIN holders i.e. `source`
        will be '3'.

        In such cases, the `code` and `desc` properties will be blank or empty
        string ("").


        * A - ALIEN

        * C - CITIZEN

        * P - PR

        * U - UNKNOWN

        * N - NOT APPLICABLE

        * &lt; BLANK &gt; (for FIN holders only)
      properties:
        code:
          type: string
          maxLength: 2
          pattern: '[a-zA-Z]{1}'
          enum:
            - A
            - C
            - P
            - U
            - 'N'
            - ''
          example: C
        desc:
          type: string
          maxLength: 300
          enum:
            - ALIEN
            - CITIZEN
            - PR
            - UNKNOWN
            - NOT APPLICABLE
            - ''
          example: CITIZEN
    schoolname:
      type: object
      title: SchoolName
      description: Name of School of Person.
      properties:
        code:
          type: string
          maxLength: 10
          description: |-
            Code value of school name.

            **Note:** Code+desc and value are mutually exclusive.
          example: T07GS3011J
        desc:
          type: string
          maxLength: 100
          description: |-
            Name of school represented by 'code'

            **Note:** Code+desc and value are mutually exclusive.
          example: SIGLAP SECONDARY SCHOOL
        value:
          type: string
          maxLength: 100
          description: |-
            Free text value of school name.

            **Note:** Code+desc and value are mutually exclusive.
          example: ''
    secondaryrace:
      type: object
      title: SecondaryRace
      description: >-
        Secondary Race of Person.


        Refer to the [Code reference tables](#section/Support) in the Support
        section for list of possible values.
      properties:
        code:
          type: string
          maxLength: 2
          pattern: '[a-zA-Z]{2}'
          description: ''
          example: EU
        desc:
          type: string
          maxLength: 300
          description: ''
          example: EURASIAN
    sex:
      type: object
      title: Sex
      description: |-
        Sex of Person.
        * 'F' - FEMALE
        * 'M' - MALE
        * 'U' - UNKNOWN
      properties:
        code:
          type: string
          enum:
            - F
            - M
            - U
          maxLength: 1
          example: F
        desc:
          type: string
          description: ''
          enum:
            - FEMALE
            - MALE
            - UNKNOWN
          example: FEMALE
    sponsoredchildrenrecords:
      type: object
      properties:
        nric:
          type: object
          description: NRIC of child
          properties:
            value:
              type: string
              maxLength: 15
              example: S5562882C
        name:
          type: object
          description: Full Name of child
          properties:
            value:
              type: string
              maxLength: 66
              example: Jo Tan Pei Ni
        hanyupinyinname:
          type: object
          description: Han Yu Pin Yin name of child.
          properties:
            value:
              type: string
              maxLength: 66
              example: Cheng Pei Ni
        aliasname:
          type: object
          description: Alias name of child.
          properties:
            value:
              type: string
              maxLength: 66
              example: ''
        hanyupinyinaliasname:
          type: object
          description: Han Yu Pin Yin Alias name of child.
          properties:
            value:
              type: string
              maxLength: 66
              example: ''
        marriedname:
          type: object
          description: Married name of child.
          properties:
            value:
              type: string
              maxLength: 66
              example: ''
        sex:
          type: object
          description: |-
            Sex of child. Possible values:

            * 'F' - FEMALE
            * 'M' - MALE
            * 'U' - UNKNOWN
          properties:
            code:
              type: string
              maxLength: 1
              enum:
                - F
                - M
                - U
              example: F
            desc:
              type: string
              maxLength: 300
              enum:
                - FEMALE
                - MALE
                - UNKNOWN
              example: FEMALE
        race:
          type: object
          description: >-
            Race of child.


            Refer to the [Code reference tables](#section/Support) in the
            Support section for list of possible values.
          properties:
            code:
              type: string
              maxLength: 2
              pattern: '[a-zA-Z]{2}'
              example: CN
            desc:
              type: string
              maxLength: 300
              example: CHINESE
        secondaryrace:
          type: object
          description: >-
            Secondary Race of child.


            Refer to the [Code reference tables](#section/Support) in the
            Support section for list of possible values.
          properties:
            code:
              type: string
              maxLength: 2
              pattern: '[a-zA-Z]{2}'
              example: ''
            desc:
              type: string
              maxLength: 300
              example: ''
        dialect:
          type: object
          description: >-
            Dialect of child.


            Refer to the [Code reference tables](#section/Support) in the
            Support section for list of possible values.
          properties:
            code:
              type: string
              maxLength: 2
              pattern: '[a-zA-Z]{2}'
              example: HK
            desc:
              type: string
              maxLength: 300
              example: HOKKIEN
        dob:
          type: object
          description: >-
            Date of Birth of child.


            See "full-date" in
            http://xml2rfc.ietf.org/public/rfc/html/rfc3339.html#anchor14
          properties:
            value:
              type: string
              format: date
              example: '2011-09-10'
        birthcountry:
          type: object
          title: BirthCountry
          description: >-
            Country of Birth of child.


            Refer to the [Code reference tables](#section/Support) in the
            Support section for list of possible values.
          properties:
            code:
              type: string
              maxLength: 2
              pattern: '[a-zA-Z]{2}'
              example: SG
            desc:
              type: string
              maxLength: 300
              example: SINGAPORE
        lifestatus:
          type: object
          description: |-
            Life Status of child. Possible values:

            * A - ALIVE
            * D - DECEASED
          properties:
            code:
              type: string
              enum:
                - A
                - D
              example: A
            desc:
              type: string
              enum:
                - ALIVE
                - DECEASED
              example: ALIVE
        residentialstatus:
          type: object
          title: ResidentialStatus
          description: |-
            Residential Status of child. Possible values:

            * A - ALIEN
            * C - CITIZEN
            * P - PR
            * U - UNKNOWN
            * N - NOT APPLICABLE
          properties:
            code:
              type: string
              maxLength: 2
              pattern: '[a-zA-Z]{1}'
              enum:
                - A
                - C
                - P
                - U
                - 'N'
              example: C
            desc:
              type: string
              maxLength: 300
              enum:
                - ALIEN
                - CITIZEN
                - PR
                - UNKNOWN
                - NOT APPLICABLE
              example: Citizen
        nationality:
          type: object
          description: >-
            Nationality of child.


            Refer to the [Code reference tables](#section/Support) in the
            Support section for list of possible values.
          properties:
            code:
              type: string
              maxLength: 2
              pattern: '[a-zA-Z]{2}'
              example: SG
            desc:
              type: string
              maxLength: 300
              example: SINGAPORE CITIZEN
        scprgrantdate:
          description: >-
            Date granted Singapore Citizenship or Permanant Resident


            See "full-date" in
            http://xml2rfc.ietf.org/public/rfc/html/rfc3339.html#anchor14
          properties:
            value:
              type: string
              format: date
              example: '2015-06-13'
      allOf:
        - $ref: '#/components/schemas/DataFieldProperties'
    vehicles:
      type: array
      items:
        type: object
        properties:
          vehicleno:
            type: object
            description: Vehicle Registration Number displayed on the vehicle number plates
            properties:
              value:
                type: string
                maxLength: 20
                example: SDF1235A
          type:
            type: object
            description: >-
              Type of Vehicles such as 'MOTOR CAR', 'STATION /WAGON/JEEP/LAND
              ROVER'
            properties:
              value:
                type: string
                maxLength: 55
                example: PASSENGER MOTOR CAR
          iulabelno:
            type: object
            description: >-
              In-Vehicle Unit (IU) number of the device fitted in
              Singapore-registered vehicles for Electronic Road Pricing (ERP)
              gantries and Electronic Parking System (EPS) car parks.
            properties:
              value:
                type: string
                maxLength: 10
                example: ''
          make:
            type: object
            description: 'Vehicle Make such as ''TOYOTA'', ''HONDA'', ''AUDI'''
            properties:
              value:
                type: string
                maxLength: 44
                example: TOYOTA
          model:
            type: object
            description: >-
              Vehicle Model such as 'COROLLA ALTIS CLASSIC 1.6 CVT', 'HRV 1.5 DX
              CVT'
            properties:
              value:
                type: string
                maxLength: 40
                example: COROLLA ALTIS
          chassisno:
            type: object
            description: Vehicle Chassis Number
            properties:
              value:
                type: string
                maxLength: 25
                example: ZC11S1735800
          engineno:
            type: object
            description: Vehicle Engine Number
            properties:
              value:
                type: string
                maxLength: 25
                example: M13A1837453
          motorno:
            type: object
            description: Vehicle Motor Number
            properties:
              value:
                type: string
                maxLength: 25
                example: ''
          yearofmanufacture:
            type: object
            description: Manufacturing year
            properties:
              value:
                type: string
                maxLength: 4
                example: '2010'
          firstregistrationdate:
            type: object
            description: >-
              Date when vehicle is registered with LTA. See "full-date" in
              http://xml2rfc.ietf.org/public/rfc/html/rfc3339.html#anchor14'
            properties:
              value:
                type: string
                format: date
                maxLength: 10
                example: '2010-06-06'
          originalregistrationdate:
            type: object
            description: >-
              Date when vehicle is first registered in the country of origin.
              See "full-date" in
              http://xml2rfc.ietf.org/public/rfc/html/rfc3339.html#anchor14'
            properties:
              value:
                type: string
                format: date
                maxLength: 10
                example: '2010-06-06'
          coecategory:
            type: object
            description: Vehicle Certificate of Entitlement (COE) bid category
            properties:
              value:
                type: string
                maxLength: 40
                example: A - CAR UP TO 1600CC & 97KW (130BHP)
          coeexpirydate:
            type: object
            description: >-
              Vehicle Certificate of Entitlement (COE) expiry date. See
              "full-date" in
              http://xml2rfc.ietf.org/public/rfc/html/rfc3339.html#anchor14'
            properties:
              value:
                type: string
                maxLength: 10
                format: date
                example: '2020-06-05'
          roadtaxexpirydate:
            type: object
            description: >-
              See "full-date" in
              http://xml2rfc.ietf.org/public/rfc/html/rfc3339.html#anchor14'
            properties:
              value:
                type: string
                format: date
                maxLength: 10
                example: '2020-06-05'
          quotapremium:
            type: object
            description: >-
              Actual Quota Premium (QP) amount payable for the COE upon
              registration, conversion or COE revalidation in Singapore dollars
              (SGD). For renewal of COE, the value will contain actual PQP paid.
            properties:
              value:
                type: number
                format: double
                multipleOf: 0.01
                maxLength: 11
                example: 14000.01
          openmarketvalue:
            type: object
            description: >-
              Open Market Value is the value of manufacturer invoice price,
              freight and insurance in Singapore dollars (SGD).
            properties:
              value:
                type: number
                format: double
                maxLength: 11
                example: 25000.01
          co2emission:
            type: object
            description: CO2 emission rate
            properties:
              value:
                type: number
                format: double
                maxLength: 9
                example: 146.01
          status:
            type: object
            description: |-
              Status of the Vehicle.

              * 1 - LIVE
              * 2 - DE-REGISTERED
            properties:
              code:
                type: string
                maxLength: 1
                enum:
                  - 1
                  - 2
                example: '1'
              desc:
                type: string
                maxLength: 300
                enum:
                  - LIVE
                  - DE-REGISTERED
                example: LIVE
          primarycolour:
            type: object
            description: Vehicle Primary Colour (e.g. BLACK)
            properties:
              value:
                type: string
                maxLength: 30
                example: BLACK
          secondarycolour:
            type: object
            description: Vehicle Primary Colour (e.g. WHITE)
            properties:
              value:
                type: string
                maxLength: 30
                example: WHITE
          attachment1:
            type: object
            description: Vehicle Attachment 1 (e.g. DISABLED)
            properties:
              value:
                type: string
                maxLength: 50
                example: DISABLED
          attachment2:
            type: object
            description: Vehicle Attachment 2 (e.g. WITH SUN ROOF)
            properties:
              value:
                type: string
                maxLength: 50
                example: WITH SUN ROOF
          attachment3:
            type: object
            description: Vehicle Attachment 3 (e.g. SIDE CURTAIN)
            properties:
              value:
                type: string
                maxLength: 50
                example: SIDE CURTAIN
          scheme:
            type: object
            description: Vehicle Scheme (e.g. REVISED OFF-PEAK CAR)
            properties:
              value:
                type: string
                maxLength: 66
                example: REVISED OFF-PEAK CAR
          thcemission:
            type: object
            description: Total Hydro Carbon (THC) emission rate
            properties:
              value:
                type: number
                format: double
                maxLength: 9
                example: 1.011001
          coemission:
            type: object
            description: Carbon Monoxide emission rate
            properties:
              value:
                type: number
                format: double
                maxLength: 9
                example: 1.100001
          noxemission:
            type: object
            description: Nitrogen Oxide (NOx) emission rate.
            properties:
              value:
                type: number
                format: double
                maxLength: 9
                example: 0.011001
          pmemission:
            type: object
            description: Particulates (PM - Atmospheric Particulate Matter) emission rate.
            properties:
              value:
                type: number
                format: double
                maxLength: 9
                example: 0.007
          enginecapacity:
            type: object
            description: Engine Capacity in cubic centimeter (cc)
            properties:
              value:
                type: integer
                maxLength: 8
                example: 1600
          powerrate:
            type: object
            description: >-
              Power Rate. Applicable to Electric and Hybrid vehicles powered by
              electric motors. Unit is Kilowatt.
            properties:
              value:
                type: number
                format: double
                maxLength: 8
                example: 1.41
          effectiveownership:
            type: object
            description: >-
              Effective Date/Time of Ownership. See "date-time" in
              http://xml2rfc.ietf.org/public/rfc/html/rfc3339.html#anchor14'
            properties:
              value:
                type: string
                format: date-time
                maxLength: 25
                example: '2010-08-31T20:12:12+08:00'
          propellant:
            type: object
            description: >-
              Propellant (e.g. Compressed Natural Gas, Diesel, Diesel-CNG,
              Diesel-Electric, Diesel-Electric (Plug-In), Electric, Gas,
              Liquefied Petroleum Gas (LPG), Petrol, Petrol-CNG,
              Petrol-Electric, Petrol-Electric (Plug-In), Petrol-LPG
            properties:
              value:
                type: string
                maxLength: 40
                example: Compressed Natural Gas
          maximumunladenweight:
            type: object
            description: Maximum Unladen Weight in kilograms (kg)
            properties:
              value:
                type: integer
                maxLength: 9
                example: 1500
          maximumladenweight:
            type: object
            description: Maximum Laden Weight in kilograms (kg)
            properties:
              value:
                type: integer
                maxLength: 12
                example: 1795
          minimumparfbenefit:
            type: object
            description: Minimum PARF Benefit in Singapore dollars (SGD).
            properties:
              value:
                type: number
                format: double
                maxLength: 12
                example: 8770.01
          nooftransfers:
            type: object
            description: Number of Transfer
            properties:
              value:
                type: integer
                maxLength: 5
                example: 2
          vpc:
            type: object
            description: Vehicle Parking Certificate. Applicable for Heavy Vehicles.
            properties:
              value:
                type: string
                maxLength: 10
                example: '1234567890'
        allOf:
          - $ref: '#/components/schemas/DataFieldProperties'
    passexpirydate:
      type: object
      title: PassExpiryDate
      description: >-
        Pass expiry of a foreigner. <br/>**Note:** Only applies to a foreigner
        with a valid pass.
      properties:
        value:
          type: string
          format: date
          description: >-
            Value of data field. See "full-date" in
            http://xml2rfc.ietf.org/public/rfc/html/rfc3339.html#anchor14
          example: '2022-12-31'
    passstatus:
      type: object
      title: PassStatus
      description: "Pass status of a FIN holder. <br/>**Note:** Only applies to a foreigner with a valid pass. \n*\tLive\n*\tApproved\n"
      properties:
        value:
          type: string
          enum:
            - Live
            - Approved
          description: Value of data field.
          example: Live
    passtype:
      type: object
      title: PassType
      description: >-
        Pass type of a FIN holder. <br/>**Note:** Only applies to a foreigner
        with a valid pass.


        * 'RPass' - Work Permit

        * 'SPass' - S Pass

        * 'P1Pass' - Employment Pass

        * 'P2Pass' - Employment Pass

        * 'QPass' - Employment Pass

        * 'PEP' - Personalised Employment Pass

        * 'WHP' - Work Holiday Pass

        * 'TEP' - Training Employment Pass

        * 'Entre' - EntrePass

        * 'DP' - Dependent Pass

        * 'LTVP' - Long Term Visit Pass

        * 'LOC' - Letter of Consent

        * 'MWP' - Miscellaneous Work Pass
      properties:
        code:
          type: string
          enum:
            - RPass
            - SPass
            - P1Pass
            - P2Pass
            - QPass
            - PEP
            - WHP
            - TEP
            - Entre
            - DP
            - LTVP
            - LOC
            - MWP
          description: Value of data field.
          example: RPass
        desc:
          type: string
          enum:
            - Work Permit
            - S Pass
            - Employment Pass
            - Employment Pass
            - Employment Pass
            - Personalised Employment Pass
            - Work Holiday Pass
            - Training Employment Pass
            - EntrePass
            - Dependent Pass
            - Long Term Visit Pass
            - Letter of Consent
            - Miscellaneous Work Pass
          example: Work Permit
    uinfin:
      type: object
      title: UINFIN
      description: Singapore issued identification number of the Person.
      properties:
        value:
          type: string
          maxLength: 66
          description: 'value of the field, should be displayed as it is.'
          example: S1111111D
    partialuinfin:
      type: object
      title: Partial UINFIN
      description: >-
        Masked Singapore issued identification number of the Person. Only the
        last 3 digit and ending alphabet will be in clear.
      properties:
        value:
          type: string
          maxLength: 9
          description: 'Value of the field, should be displayed as it is.'
          example: '*****111D'
    TokenError:
      type: object
      properties:
        message:
          type: string
        code:
          type: string
    Error:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string

